<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端分享-2022-12-15</title>
      <link href="/2022/12/14/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-12-15/"/>
      <url>/2022/12/14/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-12-15/</url>
      
        <content type="html"><![CDATA[<h2 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h2><p>在写node程序时，使用 <code>console</code> 打印，如果对象里面还是对象时不会展开, 会打印成 <code>[Object]</code>  <code>[Array]</code></p><p>如果打印的内容比较长会超过缓冲区大小， <code>terminal</code> 里会显示不全<br>这些情况下可以使用 <code>debugger</code> 搭配 <code>logpoint</code></p><span id="more"></span><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>main<br><code>main</code> 指的是 <code>npm package</code> 的入口文件，是最古老且最常用的入口文件</li><li>module<br>随着 <code>ESM</code> 和打包工具的发展, 许多 <code>package</code> 会打包成多种格式的包<br>如果使用 <code>import</code> 对该库进行导入，则先寻找 <code>module</code> 字段引入，否则引入 <code>main</code> 字段。</li><li>exports<br>不在 <code>exports</code> 字段中的模块，即使直接访问路径，也无法引用！<br>示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;exports&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;production&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;browser&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;production&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者下面这种</span></span><br><span class="line"><span class="string">&quot;exports&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;.&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;import&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;require&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>scripts<br>定义在 <code>scripts</code> 中的命令，我们通过 <code>npm run &lt;command&gt;</code> 就可以执行。 <code>npm run &lt;command&gt;</code> 是 <code>npm run-script &lt;command&gt;</code> 的简写<br><code>test</code> 、 <code>start</code> 、 <code>restart</code> 、 <code>stop</code> 这几个命令执行时可以不加 <code>run</code> ；<br><code>env</code> 是一个内置的命令, <code>npm run env</code> 可以获取到脚本运行时的所有环境变量。</li></ul><h2 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h2><p>在开发一个包想使用<a class="link"   href="https://www.npmjs.com/package/chalk" >chalk<i class="fas fa-external-link-alt"></i></a>时，遇到的一个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手Rollup</title>
      <link href="/2022/11/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRollup/"/>
      <url>/2022/11/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRollup/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Rollup"><a href="#什么是-Rollup" class="headerlink" title="什么是 Rollup"></a>什么是 <code>Rollup</code></h2><blockquote><p>Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。与传统的 CommonJS 和 AMD 这一类非标准化的解决方案不同，Rollup 使用的是 ES6 版本 Javascript 中的模块标准。新的 ES 模块可以让你自由、无缝地按需使用你最喜爱的库中那些有用的单个函数。这一特性在未来将随处可用，但 Rollup 让你现在就可以，想用就用。</p></blockquote><h2 id="为什么是-Rollup"><a href="#为什么是-Rollup" class="headerlink" title="为什么是 Rollup"></a>为什么是 <code>Rollup</code></h2><ol><li>这里简单对<code>webpack</code>、<code>gulp</code>、<code>Rollup</code>做一个比较：</li></ol><p><code>gulp</code> 是一个构建工具，主要完成代码压缩、编译转化, 可以替代手工实现自动化工作</p><p><code>Webpack</code> 支持 <code>HMR</code> ，有更完整的插件库，适合用于前端工程化开发</p><p><code>Rollup</code> 更小巧，仅仅是一款 <code>ESM</code> 打包器，支持 <code>Tree-shaking</code></p><ol start="2"><li>如果您的代码库是基于<code>ES6</code>或者<code>TS</code>，且希望其他人安装后可以直接使用，这个时候就可以使用<code>Rollup</code></li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p><code>Rollup</code> 可以通过两种方式使用：使用命令行方式，或者 <code>JavaScript API</code> 方式</p><ul><li>直接命令行运行<br>用于浏览器:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 编译为一个在 &lt;script&gt; 标签中可用的自运行函数 (&#x27;iife&#x27;)</span><br><span class="line">rollup main.js --file bundle.js --format iife</span><br></pre></td></tr></table></figure><p>用于 <code>Node.js</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 编译为 CommonJS 模块 (&#x27;cjs&#x27;)</span><br><span class="line">rollup main.js --file bundle.js --format cjs</span><br></pre></td></tr></table></figure><p>同时用于浏览器和 Node.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 需要为 UMD 格式的包指定一个名称</span><br><span class="line">rollup main.js --file bundle.js --format umd --name &quot;myBundle&quot;</span><br></pre></td></tr></table></figure><p><code>-f</code> ：是 <code>--format</code> 的缩写。<br><code>-o</code> ：指定了输出的路径。<br><code>-c</code> ：指定rollup的配置文件。<br><code>-w</code> ：监听源文件是否有改动，如果有改动，重新打包。</p><ul><li>使用配置文件<br>在项目中创建一个名为 <code>rollup.config.js</code> 的文件，增加如下代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: [<span class="string">&quot;./src/index.js&quot;</span>],</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="string">&quot;./dist/bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;umd&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;experience&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="输出的6种格式"><a href="#输出的6种格式" class="headerlink" title="输出的6种格式"></a>输出的6种格式</h2><p><code>iife</code> , <code>amd</code> , <code>umd</code> , <code>cjs</code> , <code>esm</code> , <code>system</code></p><table><thead><tr><th>模块化方案</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>iife</td><td>是前端模块化早期的产物，它的核心思路是：<br>1、构建一个匿名函数<br>2、立即执行这个函数，外部的依赖通过入参形式传入<br>3、返回该模块的输出</td><td>不影响代码体积</td><td>1、输出的变量可能影响全局变量，引入依赖包时依赖全局变量<br>2、需要使用者自行维护 <code>script</code> 标签加载顺序</td></tr><tr><td>cjs</td><td>为了解决 <code>node.js</code> 在模块化上的缺失，2009年 <code>CommonJS</code> 规范首次被提出</td><td>完善的模块化方案</td><td>只能在 <code>node.js</code> 环境使用</td></tr><tr><td>amd</td><td>2011年， <code>amdjs-api</code> 被正式提出</td><td>1、解决了 IIFE 的缺点<br>2、一套完备的浏览器里 <code>js</code> 文件模块化方案</td><td>代码组织形式别扭，可读性差</td></tr><tr><td>umd</td><td>兼容了 <code>amd</code> 和 <code>CommonJS</code></td><td>抹平了一个包在 <code>AMD</code> 和 <code>CommonJS</code> 里的差异</td><td>会产生兼容代码</td></tr><tr><td>esm</td><td><code>javascript</code> 模块化官方标准格式。</td><td>可读性高</td><td>部分浏览器不兼容</td></tr></tbody></table><h2 id="Rollup-中常用的几个插件"><a href="#Rollup-中常用的几个插件" class="headerlink" title="Rollup 中常用的几个插件"></a><code>Rollup</code> 中常用的几个插件</h2><ul><li><code>resolve</code>: 将我们编写的源码与依赖的第三方库进行合并</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @rollup/plugin-node-resolve</span><br></pre></td></tr></table></figure><p>修改 <code>rollup.config.js</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import resolve from &quot;@rollup/plugin-node-resolve&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">...</span><br><span class="line">plugins: [resolve()],</span><br><span class="line">external: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>commonjs</code>: 使得<code>rollup.js</code>编译支持<code>npm</code>模块和<code>CommonJS</code>模块方式的插件：<code>@rollup/plugin-commonjs</code></li><li><code>babel</code>: 将<code>ES6</code>语法转成<code>ES5</code></li><li><code>json</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 快速上手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写npm包遇到的问题</title>
      <link href="/2022/11/16/%E7%BC%96%E5%86%99npm%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/16/%E7%BC%96%E5%86%99npm%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong><br>最近在编写一个npm包时遇到几个问题，记录下来防止下次卡在同一个地方，后续遇到的坑会继续整理</p><h3 id="一、CJS和ESM不能同时使用"><a href="#一、CJS和ESM不能同时使用" class="headerlink" title="一、CJS和ESM不能同时使用"></a>一、CJS和ESM不能同时使用</h3><blockquote><p>问题描述：在编写一个<code>node</code>环境的<code>NPM</code>包时，引用了一个<code>ESM</code>模块机制的包</p></blockquote><ol><li><strong>Node对ESM的支持</strong><br><code>Node</code> 13.2.0 起开始正式支持<code>ES Modules</code>特性，使用方法如下：</li></ol><ul><li>在<code>package.json</code>中，增加<code>&quot;type&quot;:&quot;module&quot;</code></li><li>将文件<code>.js</code>后缀修改为<code>.mjs</code></li><li>上面两种方法二选一，如果不配置，则会抛出警告：<br><code>Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</code></li></ul><span id="more"></span><ol start="2"><li>如何发布一个支持 <code>Tree Shaking</code> 机制的 <code>npm</code> 包？<br>pkg.main 字段指向的应该是编译后生成的 ES5 版本的代码。<br>pkg.module 字段要指向的应该是一个基于 ES6 模块规范的使用ES5语法书写的模块。<br>要构建一个满足 pkg.module 字段要求的包其实很简单。如果你是使用 Rollup 打包代码， 那么只需要把 output 的格式设置为 es 就可以啦。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-11-03</title>
      <link href="/2022/11/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-11-03/"/>
      <url>/2022/11/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-11-03/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的几个问题"><a href="#遇到的几个问题" class="headerlink" title="遇到的几个问题"></a>遇到的几个问题</h2><ul><li>时间戳转换日期出现不准确情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = <span class="number">577292400000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(t).toLocaleDateString()) <span class="comment">//1988/4/18</span></span><br><span class="line">t = t - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(t).toLocaleDateString()) <span class="comment">//1988/4/16</span></span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;1988/4/17&#x27;</span>).getTime() <span class="comment">//577209600000</span></span><br><span class="line">t - t2 === <span class="number">23</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li>safari中定位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>发现用百分比不生效，修改为具体高度后解决</li></ul><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js数组去重</title>
      <link href="/2022/10/25/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/2022/10/25/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="普通数组（元素为基本类型的）"><a href="#普通数组（元素为基本类型的）" class="headerlink" title="普通数组（元素为基本类型的）"></a>普通数组（元素为基本类型的）</h2><h3 id="1-使用Set"><a href="#1-使用Set" class="headerlink" title="1. 使用Set"></a>1. 使用Set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">[...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">//两种任选一个</span></span><br></pre></td></tr></table></figure><h3 id="2-新建数组加indexOf"><a href="#2-新建数组加indexOf" class="headerlink" title="2. 新建数组加indexOf"></a>2. 新建数组加indexOf</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-类似前一种，使用includes-判断"><a href="#3-类似前一种，使用includes-判断" class="headerlink" title="3. 类似前一种，使用includes()判断"></a>3. 类似前一种，使用includes()判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newArr.includes(item)) &#123;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-变量在原数组中出现的第一个位置"><a href="#4-变量在原数组中出现的第一个位置" class="headerlink" title="4. 变量在原数组中出现的第一个位置"></a>4. 变量在原数组中出现的第一个位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.indexOf(item) === index) &#123;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-filter"><a href="#5-filter" class="headerlink" title="5. filter"></a>5. filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = arr.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-利用两层循环-数组的splice方法-不推荐"><a href="#6-利用两层循环-数组的splice方法-不推荐" class="headerlink" title="6. 利用两层循环+数组的splice方法(不推荐)"></a>6. 利用两层循环+数组的splice方法(不推荐)</h3><span id="more"></span><h2 id="对象数组的去重"><a href="#对象数组的去重" class="headerlink" title="对象数组的去重"></a>对象数组的去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;key1&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;key2&#x27;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="1-利用对象属性不能相同"><a href="#1-利用对象属性不能相同" class="headerlink" title="1. 利用对象属性不能相同"></a>1. 利用对象属性不能相同</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj.hasOwnProperty(item[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">        obj[item[<span class="string">&#x27;key&#x27;</span>]] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-使用Map"><a href="#2-使用Map" class="headerlink" title="2. 使用Map"></a>2. 使用Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.has(item[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">        map.set(item[<span class="string">&#x27;key&#x27;</span>], <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写一个cli</title>
      <link href="/2022/10/13/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAcli/"/>
      <url>/2022/10/13/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAcli/</url>
      
        <content type="html"><![CDATA[<h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><p>Command Line Interface – 命令行界面<br>为什么要写这个东西？</p><ul><li>可以自己开发一个脚手架</li><li>可以更灵活地更改配置</li></ul><h3 id="脚手架执行步骤："><a href="#脚手架执行步骤：" class="headerlink" title="脚手架执行步骤："></a>脚手架执行步骤：</h3><ul><li>在终端输入 <code>vue create vue-test-app</code></li><li>终端解析出 <code>vue</code>命令</li><li>终端环境变量中找到<code>vue</code>命令</li><li>终端利用<code>node</code>执行<code>vue.js</code></li><li><code>vue.js</code>解析<code>command / options</code></li><li><code>vue.js</code>执行<code>command</code></li><li>执行完毕，退出执行</li></ul><h3 id="为什么全局安装完vue-cli-会有一个vue命令？"><a href="#为什么全局安装完vue-cli-会有一个vue命令？" class="headerlink" title="为什么全局安装完vue-cli 会有一个vue命令？"></a>为什么全局安装完<code>vue-cli</code> 会有一个<code>vue</code>命令？</h3><ul><li>在<code>package.json</code>中配置了<code>bin</code>目录，<code>node</code>会在<code>bin</code>目录下配置一个对应的软连接</li></ul><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><h3 id="1-初始化一个项目"><a href="#1-初始化一个项目" class="headerlink" title="1. 初始化一个项目"></a>1. 初始化一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir test-cli</span><br><span class="line">&gt; <span class="built_in">cd</span> test-cli</span><br><span class="line">&gt; npm init [-y] //创建一个package.json(默认初始值)</span><br></pre></td></tr></table></figure><h3 id="2-注册执行命令"><a href="#2-注册执行命令" class="headerlink" title="2. 注册执行命令"></a>2. 注册执行命令</h3><ul><li>新建目录<code>bin</code></li><li>在这个目录新建文件<code>cli.js</code></li><li>修改<code>package.json</code>, 来告诉<code>npm</code>执行文件位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;./bin/cli.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编辑<code>cli.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-模拟执行"><a href="#3-模拟执行" class="headerlink" title="3. 模拟执行"></a>3. 模拟执行</h3><p>发布上线再安装测试比较繁琐，且导致版本号膨胀，<br>可以在本地使用 <code>npm link(npm ln)</code> 创建软链接到全局<br>执行 <code>npm link</code> ，会在node的根目录下生成三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├──node</span><br><span class="line">│   ├──node_modules</span><br><span class="line">│   ├──test</span><br><span class="line">│   ├──test.cmd</span><br><span class="line">│   └──test.ps1</span><br></pre></td></tr></table></figure><p>在命令行中输入 <code>test</code> , 会看到打印信息</p><span id="more"></span><h2 id="主程序编写"><a href="#主程序编写" class="headerlink" title="主程序编写"></a>主程序编写</h2><h3 id="1-需要使用的核心库"><a href="#1-需要使用的核心库" class="headerlink" title="1. 需要使用的核心库"></a>1. 需要使用的核心库</h3><ul><li><code>commander.js</code>: 用来解析各种命令</li><li><code>inquirer.js</code>：命令行交互，创建一个选项列表让用户选择</li><li><code>downloadgitRepo</code>: 下载</li><li><code>chalk</code>: 文字添加颜色，美化输出</li></ul><h3 id="2-process-argv"><a href="#2-process-argv" class="headerlink" title="2. process.argv"></a>2. <code>process.argv</code></h3><p>可以获取到用户在命令行输入的内容</p><ul><li><code>cli.js</code>文件中添加<code>console.log(process.argv)</code></li><li>执行<code>test aaa</code>, 打印如下结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#x27;D:\\node\\node.exe&#x27;,</span><br><span class="line">  &#x27;D:\\node\\node_modules\\chen-cli\\bin\\cli.js&#x27;,</span><br><span class="line">  &#x27;aaa&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-修改-cli-js"><a href="#3-修改-cli-js" class="headerlink" title="3. 修改 cli.js"></a>3. 修改 <code>cli.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">&#x27;create &lt;app-name&gt;&#x27;</span>)</span><br><span class="line">    .description(<span class="string">&#x27;create a new project&#x27;</span>)</span><br><span class="line">    .option(<span class="string">&#x27;-f --force&#x27;</span>, <span class="string">&#x27;overwrite target directory if it exist&#x27;</span>)</span><br><span class="line">    .action(<span class="function">(<span class="params">name, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;options&#x27;</span>, options)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .version(<span class="string">`v<span class="subst">$&#123;<span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).version&#125;</span>`</span>)</span><br><span class="line">    .usage(<span class="string">&#x27;&lt;command&gt; [option]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><ul><li>执行<code>test -V</code>会打印package.json中的版本号</li><li>执行<code>test create app -f</code>会触发对应的action方法</li></ul><h3 id="4-编写具体的方法"><a href="#4-编写具体的方法" class="headerlink" title="4. 编写具体的方法"></a>4. 编写具体的方法</h3><ul><li>新建目录<code>lib</code></li><li>在这个目录新建文件<code>create.js</code></li><li>获取项目模板有两种方式，一种是git克隆，另一种内置在项目里</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> downloadgitRepo = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="comment">// const chalk = require(&#x27;chalk&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapLoading</span>(<span class="params">fn, message, params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message)</span><br><span class="line">    <span class="keyword">if</span> (params.type === <span class="string">&#x27;static&#x27;</span>) &#123; <span class="comment">// 1:使用内置模板</span></span><br><span class="line">        <span class="keyword">const</span> targetDir = params.targetDir</span><br><span class="line">        <span class="keyword">const</span> templateDir = path.resolve(__dirname, <span class="string">&#x27;../template&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.mkdirSync(targetDir)</span><br><span class="line">            fs.copySync(templateDir, targetDir)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;创建失败&#x27;</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params.type === <span class="string">&#x27;git&#x27;</span>) &#123; <span class="comment">// 2:git</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// await fn(params.gitUrl, params.targetDir)</span></span><br><span class="line">            cp.execSync(<span class="string">`git clone <span class="subst">$&#123;params.gitUrl&#125;</span> <span class="subst">$&#123;params.targetName&#125;</span>`</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;创建失败&#x27;</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.downloadgitRepo = util.promisify(downloadgitRepo)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">download</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> wrapLoading(</span><br><span class="line">            <span class="built_in">this</span>.downloadgitRepo,</span><br><span class="line">            <span class="string">&#x27;waiting download template&#x27;</span>,</span><br><span class="line">            params</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// console.log(`\r\nSuccessfully create project $&#123;chalk.cyan(this.name)&#125;`)</span></span><br><span class="line">        <span class="comment">// console.log(`\r\n cd $&#123;chalk.cyan(this.name)&#125;`)</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;npm run dev\r\n&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Generator</span><br></pre></td></tr></table></figure><h2 id="npm发布"><a href="#npm发布" class="headerlink" title="npm发布"></a>npm发布</h2><h3 id="1-注册npm账号"><a href="#1-注册npm账号" class="headerlink" title="1. 注册npm账号"></a>1. 注册npm账号</h3><p>如果没有账号先去官网注册一个<br>访问<a class="link"   href="https://www.npmjs.com" >npm官网<i class="fas fa-external-link-alt"></i></a>; 注册一个账号</p><h3 id="2-发布域级包"><a href="#2-发布域级包" class="headerlink" title="2. 发布域级包"></a>2. 发布域级包</h3><p>为了避免命名冲突</p><ul><li>npm官网点击头像，选择下拉框中的<code>Add Organization</code></li><li>添加后得到了名称<code>name</code></li><li>下次初始化时<code>npm init --scope=name</code></li><li>如果是开发完的包, 直接修改<code>package.json</code>中的name属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;@name/test-cli&quot;,</span><br></pre></td></tr></table></figure><h3 id="3-还原仓库地址"><a href="#3-还原仓库地址" class="headerlink" title="3. 还原仓库地址"></a>3. 还原仓库地址</h3><p>使用了淘宝镜像的要修改回官方地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h3 id="4-上传发布"><a href="#4-上传发布" class="headerlink" title="4. 上传发布"></a>4. 上传发布</h3><ul><li><code>npm whoami</code>可以看登录信息</li><li>未登录的使用<code>npm login</code></li><li><code>npm publish</code>发布</li><li>如果返回E402错误，使用<code>npm publish --access public</code></li><li>发布成功后可以安装使用</li></ul><h3 id="5-修改提交"><a href="#5-修改提交" class="headerlink" title="5. 修改提交"></a>5. 修改提交</h3><p>每次修改后要改版本号，不能提交相同的；</p><ul><li>主版本号(major)：当你做了不兼容的API修改</li><li>次版本号(minor)：当你做了向下兼容的功能性新增</li><li>修订号(patch)：当你做了向下兼容的问题修正</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm version patch</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>另外还有先行版本；当要发行大版本或者核心功能时，不能保证这个版本完全正常，就要先发一个先行版本<br>常见的先行版本号有：</p><ul><li>alpha：不稳定版本，一般而言，该版本的Bug较多，需要继续修改，是测试版本</li><li>beta：基本稳定，相对于Alpha版已经有了很大的进步，消除了严重错误</li><li>rc：和正式版基本相同，基本上不存在导致错误的Bug</li><li>release：最终版本</li></ul><h3 id="6-版本撤回"><a href="#6-版本撤回" class="headerlink" title="6. 版本撤回"></a>6. 版本撤回</h3><p> <code>npm unpublish [pkg]@[version]</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cli </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-09-15</title>
      <link href="/2022/09/15/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-09-15/"/>
      <url>/2022/09/15/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-09-15/</url>
      
        <content type="html"><![CDATA[<h2 id="node版本管理工具"><a href="#node版本管理工具" class="headerlink" title="node版本管理工具"></a>node版本管理工具</h2><p><code>nvm</code> 是 Node.js 的版本管理工具，可以创建不同版本 Node 的隔离环境，从而避免不同版本包之间的干扰<br><code>mac</code>环境推荐使用<code>n</code></p><h2 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h2><p><a href="/html/imgClip1">地址</a></p><h2 id="js大数字问题"><a href="#js大数字问题" class="headerlink" title="js大数字问题"></a>js大数字问题</h2><p>超出 2 的 53 次方之后，一个数就不精确了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="number">9007199254740991</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handleResData</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    str = str.replace(<span class="regexp">/[:]([0-9]&#123;18,&#125;)[,]?/g</span>,<span class="string">`:&quot;$1&quot;,`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-07-28</title>
      <link href="/2022/07/28/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-07-28/"/>
      <url>/2022/07/28/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-07-28/</url>
      
        <content type="html"><![CDATA[<h2 id="NUXT"><a href="#NUXT" class="headerlink" title="NUXT"></a>NUXT</h2><h3 id="NUXT-简介"><a href="#NUXT-简介" class="headerlink" title="NUXT 简介"></a><code>NUXT</code> 简介</h3><ul><li>Nuxt.js 是一个基于 Vue.js 的服务端渲染应用框架，它可以帮我们轻松的实现同构应用。</li><li>SSR是英文server side render的缩写，即服务端描画。</li></ul><h3 id="NUXT-解决了什么问题"><a href="#NUXT-解决了什么问题" class="headerlink" title="NUXT 解决了什么问题"></a><code>NUXT</code> 解决了什么问题</h3><ul><li>SPA随着工程不断变大，打包文件不断增长，页面的整体刷新加载速度慢。</li><li>为了SEO</li></ul><h3 id="NUXT-会带来的问题"><a href="#NUXT-会带来的问题" class="headerlink" title="NUXT 会带来的问题"></a><code>NUXT</code> 会带来的问题</h3><ul><li>更长的链路，之前是浏览器+nginx+后台服务，而现在就变成浏览器+nginx+nodejs+后台服务。</li><li>nodejs中的阻塞型请求，容易成为性能的瓶颈。</li><li>一套api，要考虑前后端的兼容性。</li></ul><span id="more"></span><h3 id="VUE3"><a href="#VUE3" class="headerlink" title="VUE3"></a>VUE3</h3><p><a href="//chenshanshu.github.io/2022/07/15/vue3快速上手/">VUE3介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手vue3</title>
      <link href="/2022/07/15/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bvue3/"/>
      <url>/2022/07/15/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bvue3/</url>
      
        <content type="html"><![CDATA[<h2 id="vue3的优势"><a href="#vue3的优势" class="headerlink" title="vue3的优势"></a>vue3的优势</h2><ol><li><code>Vue3</code>使用<code>TS</code>重构了项目，获得更好的类型支持。<ul><li>TypeScript 增加了代码的可读性和可维护性</li><li>引入了接口、类、继承的编程思想</li><li>ts是js的超集，支持所有<code>es6</code>语法</li><li>ts在编译时会有错误提示，js在运行时才能暴露错误（大型应用测试很难覆盖到全部代码）</li><li>ts是强类型语言，可读性强，方便迭代 (不是「强类型」，是「静态类型检查」的「弱类型」)</li><li>TypeScript 的类型系统是图灵完备的，可以定义从简单到复杂的几乎一切类型</li><li>新建小程序项目可以发现默认的模板是ts</li></ul></li><li>重构了响应式系统</li><li>更好的Tree shaking</li></ol><blockquote><p>Tree-shaking其实就是把无用的模块进行“剪枝”，很多没有用到的 <code>API</code> 就不会打包到最后的包里</p></blockquote><ol start="4"><li>比<code>Vue 2</code>更强<ul><li>重写了虚拟Dom的实现</li><li>编译模板的优化。</li><li>更高效的组件初始化。</li><li><code>update</code>性能提高1.3~2倍。</li><li><code>SSR</code>速度提高了2~3倍。</li></ul></li><li>Composition API</li><li>暴露自定义渲染API</li></ol><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><ol><li><code>Options API</code>与<code>Composition API</code>对比</li></ol><table>    <tbody>    <tr>    <th>Options API 伪代码</th>    <th>Composition API 伪代码</th>    </tr>    <tr>    <td>        <pre>            <code>                export default &#123;                     name: ...,                    data() &#123;                        return &#123;                            // 功能A                            // 功能B                            ...                        &#125;                    &#125;,                    methods: &#123;                        // 功能A                        // 功能B                        ...                    &#125;,                    created() &#123;                        // 功能A                        // 功能B                        ...                    &#125;                &#125;            </code>        </pre>    </td>    <td>        <pre>            <code>                import &#123; defineComponent &#125; from 'vue'                export default defineComponent(&#123;                    setup(props,context)&#123;                        // 功能A                        // 功能B                        ...                        return&#123;                            ...                        &#125;                    &#125;                &#125;)            </code>        </pre>    </td>    </tr>    </tbody></table><ol start="2"><li>Composition API<br>这里仅介绍setup语法糖用法，函数式写法请参考vue3文档</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt; script setup &gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        ref,</span><br><span class="line">        reactive,</span><br><span class="line">        defineExpose,</span><br><span class="line">        defineProps,</span><br><span class="line">        defineEmits,</span><br><span class="line">        onMounted,</span><br><span class="line">        nextTick,</span><br><span class="line">        computed，</span><br><span class="line">        watch</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    useStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> myLogo <span class="keyword">from</span> <span class="string">&#x27;@/components/myLogo&#x27;</span> <span class="comment">//引入的组件不需要再注册</span></span><br><span class="line"><span class="keyword">const</span> store = useStore() <span class="comment">//获取vuex商店</span></span><br><span class="line"><span class="keyword">const</span> userInfo = computed(<span class="function">() =&gt;</span> store.state.userInfo)</span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">    <span class="attr">item</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    modelA()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = ref(<span class="literal">null</span>) <span class="comment">// 1. ref底层还是调用的reactive</span></span><br><span class="line"><span class="keyword">const</span> element = ref(<span class="literal">null</span>) <span class="comment">// 2. ref的另一个用法，添加到元素的ref属性，将元素赋值给这个变量</span></span><br><span class="line"><span class="keyword">const</span> list2 = reactive(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modelA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 3. js中需要通过.value才能操作数据，template模板中可以直接访问</span></span><br><span class="line">        list.value = res.data;</span><br><span class="line">        list2.a = res.data.no;</span><br><span class="line">        <span class="comment">// 4. 不能重新给list2赋值，否则会断开响应式</span></span><br><span class="line">        <span class="comment">// list2 = &#123;</span></span><br><span class="line">        <span class="comment">//     ...</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5. 给父组件传参方式</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;choose&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    emit(<span class="string">&#x27;choose&#x27;</span>, [arg])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. setup中定义的变量、方法在外部组件不可见，通过defineExpose暴露出去</span></span><br><span class="line">defineExpose(&#123;</span><br><span class="line">        modelA</span><br><span class="line">    &#125;) &lt;</span><br><span class="line">    /script&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="生命周期对比"><a href="#生命周期对比" class="headerlink" title="生命周期对比"></a>生命周期对比</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue2--------------vue3</span><br><span class="line">beforeCreate  -&gt; setup()</span><br><span class="line">created       -&gt; setup()</span><br><span class="line">beforeMount   -&gt; onBeforeMount</span><br><span class="line">mounted       -&gt; onMounted</span><br><span class="line">beforeUpdate  -&gt; onBeforeUpdate</span><br><span class="line">updated       -&gt; onUpdated</span><br><span class="line">beforeDestroy -&gt; onBeforeUnmount</span><br><span class="line">destroyed     -&gt; onUnmounted</span><br><span class="line">activated     -&gt; onActivated</span><br><span class="line">deactivated   -&gt; onDeactivated</span><br><span class="line">errorCaptured -&gt; onErrorCaptured</span><br></pre></td></tr></table></figure><h2 id="vue3注意点"><a href="#vue3注意点" class="headerlink" title="vue3注意点"></a>vue3注意点</h2><ul><li>放弃了对ie11的支持（proxy）</li><li><span style="color:red; ">不再使用this</span></li><li>删除了<code>onBeforeCreate</code>和<code>onCreated</code>。因为<code>setup</code>总是在创建组件实例时调用</li><li>给vue2开了个口子，旧的options api也能用</li><li>移除了<code>filter</code>，可以使用<code>function</code>和<code>computed</code>替代</li><li>vue3不限制单个根标签</li><li>避免写面条式代码</li></ul><h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h2><!-- #327bf9 --><p>vuex已停止接受新功能，推荐vue3中使用<span style="color:#327bf9; ">pinia</span></p><ul><li>对于<code>typescript</code>支持更好</li><li>移除了mutation<br>使用方法和vuex类似，这里不多介绍了<br><a class="link"   href="https://www.php.cn/vuejs/488613.html" >什么是pinia<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 快速上手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6整理</title>
      <link href="/2022/06/30/es6%E6%95%B4%E7%90%86/"/>
      <url>/2022/06/30/es6%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><h3 id="类中的方法"><a href="#类中的方法" class="headerlink" title="类中的方法"></a>类中的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//不需要加function关键字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一次向类添加多个方法</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Test.prototype, &#123;</span><br><span class="line">    <span class="function"><span class="title">toValue</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="title">toValue2</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>类中的方法是定义在原型上面；在实例上调用方法，其实就是调用原型上的方法</li><li>类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</li></ol><h3 id="实例属性的新写法"><a href="#实例属性的新写法" class="headerlink" title="实例属性的新写法"></a>实例属性的新写法</h3><p>除了在constructor()里面的this上面，也可以定义在类内部的最顶层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    _count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新写法定义的属性是实例对象自身的属性，而不是在原型上</li></ul><h3 id="Class表达式"><a href="#Class表达式" class="headerlink" title="Class表达式"></a>Class表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个类的名字是<code>Me</code>, <code>Me</code>只在<code>class</code>的内部可以使用，在<code>class</code>外部只能用<code>MyClass</code>引用</li><li>可以写立即执行的<code>class</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>使用<code>static</code>关键字，表示该方法不会被实例继承，而是直接通过类来调用</li><li>静态方法中的<code>this</code>指的是类本身</li><li>父类的静态方法可被子类继承</li><li>静态方法可以从<code>super</code>对象上调用</li><li>非静态方法不能使用<code>this</code>关键字访问静态方法</li></ul><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> prop1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prop = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h3><p>私有字段在类声明的构造方法中可被访问（只能在类的内部访问的方法和属性）</p><ul><li>定义在类外部，在类内部调用</li><li>将方法名命名为一个<code>Symbol</code></li><li>使用<code>#</code>前缀来定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    #privateField;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#privateField = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.#privateField; <span class="comment">//语法错误</span></span><br><span class="line">        <span class="built_in">this</span>.#test = <span class="number">1</span>; <span class="comment">//语法错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> ClassA()</span><br><span class="line">instance.#privateField === <span class="number">1</span>; <span class="comment">//语法错误</span></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-06-09</title>
      <link href="/2022/06/06/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-06-09/"/>
      <url>/2022/06/06/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-06-09/</url>
      
        <content type="html"><![CDATA[<h4 id="几个比较实用的git命令"><a href="#几个比较实用的git命令" class="headerlink" title="几个比较实用的git命令"></a>几个比较实用的git命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 拉取远程代码 --&gt;</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">&lt;!-- 暂存 --&gt;</span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br><span class="line">&lt;!-- 把一个分支转移到另一个分支 --&gt;</span><br><span class="line">git cherry-pick &lt;commitHash&gt;</span><br><span class="line">git cherry-pick &lt;id1&gt;..&lt;id2&gt;</span><br><span class="line">&lt;!-- 改写上一次提交信息 --&gt;</span><br><span class="line">git commit -v --amend</span><br><span class="line">&lt;!-- 清除未跟踪的文件 --&gt;</span><br><span class="line">git clean -f --d</span><br><span class="line">&lt;!-- 清除ignore之前提交的文件 --&gt;</span><br><span class="line">git rm -r --cached</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="css分享"><a href="#css分享" class="headerlink" title="css分享"></a>css分享</h4><ul><li>小程序css变量<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 解决iPhonex 虚拟按键 */</span></span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="built_in">calc</span>(<span class="number">8px</span> + <span class="built_in">constant</span>(safe-area-inset-bottom));</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="built_in">calc</span>(<span class="number">8px</span> + <span class="built_in">env</span>(safe-area-inset-bottom));</span><br><span class="line"><span class="comment">/* css变量 */</span></span><br><span class="line">--loading-grey: <span class="number">#f1f1f1</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">var</span>(--loading-grey, red);</span><br></pre></td></tr></table></figure></li><li>骨架屏<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> loading &#123;</span><br><span class="line">    <span class="comment">/* to &#123;</span></span><br><span class="line"><span class="comment">        background-position-x: -20%;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>粘性定位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: sticky;</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h4 id="小程序中取高度"><a href="#小程序中取高度" class="headerlink" title="小程序中取高度"></a>小程序中取高度</h4><ul><li>scroll-view组件必需给定高度才能触发滑动加载更多</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> windowHeight = uni.getSystemInfoSync().windowHeight;</span><br><span class="line"><span class="built_in">this</span>.scrollHeight = windowHeight;</span><br><span class="line"><span class="keyword">const</span> stickyBar = uni.createSelectorQuery().select(<span class="string">&#x27;.stickyBar&#x27;</span>)</span><br><span class="line">stickyBar.boundingClientRect(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.scrollHeight -= data.height</span><br><span class="line">&#125;).exec()</span><br><span class="line"><span class="keyword">const</span> footerBar = uni.createSelectorQuery().select(<span class="string">&#x27;.footerBar&#x27;</span>)</span><br><span class="line">footerBar.boundingClientRect(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.scrollHeight -= data.height</span><br><span class="line">&#125;).exec()</span><br></pre></td></tr></table></figure><ul><li><p>scroll-view组件中fixed定位失效问题<br>  将要定位的元素移到scroll-view组件外</p></li><li><p>标题栏高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = uni.getMenuButtonBoundingClientRect(); <span class="comment">//胶囊</span></span><br><span class="line"><span class="keyword">const</span> navigation = uni.getSystemInfoSync() <span class="comment">//状态栏</span></span><br><span class="line"><span class="keyword">const</span> statusHeight = navigation.statusBarHeight</span><br><span class="line"><span class="keyword">const</span> titleBarHeight = (rect.top - statusHeight) * <span class="number">2</span> + rect.height;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ES6中的默认参数"><a href="#ES6中的默认参数" class="headerlink" title="ES6中的默认参数"></a>ES6中的默认参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;a=<span class="number">1</span>&#125; = res</span><br><span class="line"><span class="comment">// 当res中没有a属性或者属性值为undefined，会赋默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当不传参或传undefined，会赋默认值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-04-21</title>
      <link href="/2022/04/21/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-04-21/"/>
      <url>/2022/04/21/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-04-21/</url>
      
        <content type="html"><![CDATA[<h4 id="word转html标签"><a href="#word转html标签" class="headerlink" title="word转html标签"></a>word转html标签</h4><p>处理一些内容比较多的文档，如用户协议之类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">document = Document(<span class="string">&#x27;XXXX.docx&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&lt;html&gt;&#x27;</span></span><br><span class="line"><span class="built_in">str</span> += <span class="string">&#x27;&lt;style&gt;.paragraph &#123;text-indent: 30px;&#125;.bold &#123;font-weight: bold;&#125;.underline &#123;text-decoration: underline;&#125;&lt;/style&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> document.paragraphs:</span><br><span class="line">    <span class="built_in">str</span> += <span class="string">&#x27;&lt;p class=&quot;paragraph&quot;&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> p.runs:</span><br><span class="line">        <span class="keyword">if</span>(n.font.color.rgb):</span><br><span class="line">            style = <span class="string">&#x27;color:#&#123;&#125;;&#x27;</span>.<span class="built_in">format</span>(n.font.color.rgb)</span><br><span class="line">        <span class="keyword">if</span>(n.bold):</span><br><span class="line">            classList = <span class="string">&#x27;bold&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(n.underline):</span><br><span class="line">            classList = classList + <span class="string">&#x27; underline&#x27;</span> <span class="keyword">if</span> classList <span class="keyword">else</span> <span class="string">&#x27;underline&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(classList):</span><br><span class="line">            <span class="built_in">str</span> += <span class="string">&#x27;&lt;span class=&quot;&#123;&#125;&quot; style=&quot;&#123;&#125;&quot;&gt;&#123;&#125;&lt;/span&gt;&#x27;</span>.<span class="built_in">format</span>(classList,style,n.text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">str</span> += n.text</span><br><span class="line">    <span class="built_in">str</span> += <span class="string">&#x27;&lt;/p&gt;&#x27;</span></span><br><span class="line"><span class="built_in">str</span> += <span class="string">&#x27;&lt;/html&gt;&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;XXXX.html&#x27;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">bytes</span>(<span class="built_in">str</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="gulp的简单用例"><a href="#gulp的简单用例" class="headerlink" title="gulp的简单用例"></a>gulp的简单用例</h4><blockquote><p>官方介绍：gulp是一个工具包，可帮助您自动化开发工作流程中繁重而耗时的任务。</p></blockquote><p>gulp是工具链、构建工具。可以配合各种插件做js压缩，css压缩，less编译等，可以替代手工实现自动化工作。<br>webpack是文件打包工具，可以把项目的各种js文件、css文件等打包合并成一个或多个文件，主要用于模块化方案，预编译模块的方案。</p><h5 id="实现实时scss转wxss"><a href="#实现实时scss转wxss" class="headerlink" title="实现实时scss转wxss"></a>实现实时scss转wxss</h5><p>根目录下创建gulpfile.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> through = <span class="built_in">require</span>(<span class="string">&quot;through2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>)(<span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&quot;gulp-rename&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> replace = <span class="built_in">require</span>(<span class="string">&quot;gulp-replace&quot;</span>);</span><br><span class="line">sass.compiler = <span class="built_in">require</span>(<span class="string">&quot;node-sass&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scssToCss</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> destinationPath = filePath.split(<span class="string">&quot;/&quot;</span>).slice(<span class="number">0</span>, -<span class="number">1</span>).join(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">gulp</span><br><span class="line">.src(filePath)</span><br><span class="line">.pipe(sass().on(<span class="string">&quot;error&quot;</span>, sass.logError))</span><br><span class="line">.pipe(replaceImportCss())</span><br><span class="line">.pipe(</span><br><span class="line">rename(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">path.extname = <span class="string">&quot;.wxss&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">.pipe(gulp.dest(destinationPath))</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> replaceImportCss = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> replace(<span class="regexp">/url\((.+\.css)\)/g</span>, <span class="function">(<span class="params">match, $<span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(match, $<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">`&quot;<span class="subst">$&#123;$<span class="number">1</span>&#125;</span>&quot;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> watcher = gulp.watch([<span class="string">&quot;./**/*.scss&quot;</span>, <span class="string">&quot;!./node_modules/**/*.scss&quot;</span>]);</span><br><span class="line">watcher.on(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  scssToCss(path);</span><br><span class="line">&#125;);</span><br><span class="line">watcher.on(<span class="string">&quot;unlink&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`File <span class="subst">$&#123;path&#125;</span> was removed`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="将uni-app代码转vue"><a href="#将uni-app代码转vue" class="headerlink" title="将uni-app代码转vue"></a>将uni-app代码转vue</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//750rpx=&gt;1080px</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> stream = through.obj(<span class="function"><span class="keyword">function</span>(<span class="params">file, encoding, callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!file.isBuffer()) &#123;</span><br><span class="line"><span class="keyword">return</span> callback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fileContent = file.contents.toString(<span class="string">&quot;utf8&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> newFileCon = fileContent.replace(<span class="regexp">/([\d.]+)rpx/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">Number</span>($<span class="number">1</span>) * <span class="number">1080</span> / <span class="number">750</span>).toFixed(<span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">            .replace(<span class="regexp">/&lt;view([\s\S]*?)&gt;/gi</span>, <span class="string">&quot;&lt;div $1&gt;&quot;</span>)</span><br><span class="line">.replace(<span class="regexp">/&lt;\/\s?view&gt;/gi</span>, <span class="string">&quot;&lt;/div&gt;&quot;</span>)</span><br><span class="line">.replace(<span class="regexp">/&lt;image([\s\S]*?)&gt;/gi</span>, <span class="string">&quot;&lt;img $1&gt;&quot;</span>)</span><br><span class="line">.replace(<span class="regexp">/&lt;\/\s?image&gt;/gi</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newFileCon !== fileContent) &#123;</span><br><span class="line">file.contents = Buffer.from(newFileCon);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.emit(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.push(file);</span><br><span class="line">callback();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferVue</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> destinationPath = filePath.split(<span class="string">&quot;/&quot;</span>).slice(<span class="number">0</span>, -<span class="number">1</span>).join(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">gulp</span><br><span class="line">.src(filePath)</span><br><span class="line">.pipe(rpx2px())</span><br><span class="line">.pipe(gulp.dest(<span class="string">&#x27;./h5&#x27;</span>))</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="eventEmitter的简单使用方法"><a href="#eventEmitter的简单使用方法" class="headerlink" title="eventEmitter的简单使用方法"></a>eventEmitter的简单使用方法</h4><p><a href="/utils/eventEmitter.js">eventEmitter.js</a></p><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;./utils/eventEmitter.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">App(&#123;</span><br><span class="line">    eventBus,</span><br><span class="line">    <span class="function"><span class="title">onLaunch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.getData</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            ...,</span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">&#123;data&#125;</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.globalData.loginData = data</span><br><span class="line">                eventBus.emit(<span class="string">&#x27;afterGetData&#x27;</span>, data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">onLoad</span>:<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(app.globalData.loginData)&#123;</span><br><span class="line">            <span class="built_in">this</span>.loginData = app.globalData.loginData</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            app.eventBus.on(<span class="string">&#x27;afterGetData&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.loginData = app.globalData.loginData</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word2html </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享-2022-03-03</title>
      <link href="/2022/03/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-03-03/"/>
      <url>/2022/03/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-03-03/</url>
      
        <content type="html"><![CDATA[<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ol><li>空值合并运算符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = obj.a || <span class="number">1</span> <span class="comment">//布尔逻辑运算符 (0,&#x27;&#x27;,NaN,null,undefined,false)会转换成false</span></span><br><span class="line"><span class="keyword">let</span> a2 = obj.a ? obj.a : <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3 = obj.a ?? <span class="string">&#x27;a&#x27;</span> <span class="comment">//空值合并运算符</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可选链操作符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c1 = obj?.c?.c1</span><br><span class="line"><span class="keyword">let</span> c2 = obj?.c?.[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> c3 = obj?.c?.c2?.()</span><br></pre></td></tr></table></figure><ol start="3"><li>展开语法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、函数调用：</span></span><br><span class="line">test(...list1)</span><br><span class="line"><span class="comment">// 2、字面量数组构造或字符串：</span></span><br><span class="line"><span class="built_in">console</span>.log([...list1, <span class="string">&#x27;4&#x27;</span>, ...<span class="string">&#x27;test&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(...list1)</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(list1)])</span><br><span class="line"><span class="comment">// &lt;Hello params=&#123;...params&#125;&gt;</span></span><br><span class="line"><span class="comment">// 3、构造字面量对象时,进行克隆或者属性拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">d</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        <span class="attr">e</span>: <span class="regexp">/^\d&#123;1&#125;/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    ...obj1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1)) <span class="comment">//&#123;&quot;a&quot;:&#123;&quot;b&quot;:1,&quot;e&quot;:&#123;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><ol><li>屏幕刷新频率：屏幕每秒出现图像的次数。普通笔记本为60Hz</li><li>动画原理：计算机每16.7ms刷新一次，由于人眼的视觉停留，所以看起来是流畅的移动。</li><li>setTimeout：通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：<ul><li>settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；</li><li>settimeout的固定时间间隔不一定与屏幕刷新时间相同，会引起丢帧。</li></ul></li><li>requestAnimationFrame的优势：<ul><li>由系统决定回调函数的执行时机。60Hz的刷新频率，那么每次刷新的间隔中会执行一次回调函数，不会引起丢帧，不会卡顿</li><li>CPU节能，当页面被隐藏或最小化时，setTimeout 仍然在后台执行，requestAnimationFrame会停止渲染</li></ul></li></ol><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/check1.png"                      alt="check" title="pic2" style="width:30%; float:left; "                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/check2.png"                      alt="check" title="pic3" style="width:30%; float:left; "                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/check.gif"                      alt="check" title="pic1" style="width:30%; "                ><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myAnimation</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    target,</span></span></span><br><span class="line"><span class="params"><span class="function">    time,</span></span></span><br><span class="line"><span class="params"><span class="function">    inAnimation,</span></span></span><br><span class="line"><span class="params"><span class="function">    afterAnimation</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> aniId = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> currentNo = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">const</span> p = (time * time) / target</span><br><span class="line">    <span class="keyword">const</span> render = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> timeRange = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - startTime;</span><br><span class="line">        currentNo = timeRange * timeRange / p</span><br><span class="line">        currentNo = currentNo &gt;= target ? target : currentNo</span><br><span class="line">        <span class="keyword">if</span> (inAnimation &amp;&amp; <span class="keyword">typeof</span> inAnimation === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            inAnimation(currentNo)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentNo &lt; target) &#123;</span><br><span class="line">            aniId = requestAnimationFrame(render)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cancelAnimationFrame(aniId)</span><br><span class="line">            <span class="keyword">if</span> (afterAnimation &amp;&amp; <span class="keyword">typeof</span> afterAnimation === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                afterAnimation()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    aniId = requestAnimationFrame(render)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="移动端自适应布局"><a href="#移动端自适应布局" class="headerlink" title="移动端自适应布局"></a>移动端自适应布局</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win, lib</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doc = win.document;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement;</span><br><span class="line">    <span class="keyword">var</span> metaEl = doc.querySelector(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> flexibleEl = doc.querySelector(<span class="string">&#x27;meta[name=&quot;flexible&quot;]&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> scale = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> tid;</span><br><span class="line">    <span class="keyword">var</span> flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metaEl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">&#x27;将根据已有的meta标签来设置缩放比例&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> match = metaEl.getAttribute(<span class="string">&#x27;content&#x27;</span>).match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            scale = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>]);</span><br><span class="line">            dpr = <span class="built_in">parseInt</span>(<span class="number">1</span> / scale);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flexibleEl) &#123;</span><br><span class="line">        <span class="keyword">var</span> content = flexibleEl.getAttribute(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (content) &#123;</span><br><span class="line">            <span class="keyword">var</span> initialDpr = content.match(<span class="regexp">/initial\-dpr=([\d\.]+)/</span>);</span><br><span class="line">            <span class="keyword">var</span> maximumDpr = content.match(<span class="regexp">/maximum\-dpr=([\d\.]+)/</span>);</span><br><span class="line">            <span class="keyword">if</span> (initialDpr) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(initialDpr[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maximumDpr) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(maximumDpr[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">        <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</span><br><span class="line">        <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">        <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">        <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">            <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">            <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                dpr = <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">                dpr = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dpr = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">            dpr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scale = <span class="number">1</span> / dpr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docEl.setAttribute(<span class="string">&#x27;data-dpr&#x27;</span>, dpr);</span><br><span class="line">    <span class="keyword">if</span> (!metaEl) &#123;</span><br><span class="line">        metaEl = doc.createElement(<span class="string">&#x27;meta&#x27;</span>);</span><br><span class="line">        metaEl.setAttribute(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;viewport&#x27;</span>);</span><br><span class="line">        metaEl.setAttribute(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;initial-scale=&#x27;</span> + scale + <span class="string">&#x27;, maximum-scale=&#x27;</span> + scale + <span class="string">&#x27;, minimum-scale=&#x27;</span> + scale + <span class="string">&#x27;, user-scalable=no,viewport-fit=cover&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (docEl.firstElementChild) &#123;</span><br><span class="line">            docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> wrap = doc.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            wrap.appendChild(metaEl);</span><br><span class="line">            doc.write(wrap.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(metaEl)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">        <span class="keyword">if</span> (width / dpr &gt; <span class="number">1080</span>) &#123;</span><br><span class="line">            width = <span class="number">1080</span> * dpr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        flexible.rem = win.rem = rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    win.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(tid);</span><br><span class="line">        tid = <span class="built_in">setTimeout</span>(refreshRem, <span class="number">300</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    win.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(tid);</span><br><span class="line">            tid = <span class="built_in">setTimeout</span>(refreshRem, <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doc.readyState === <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">        doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doc.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    refreshRem();</span><br><span class="line"></span><br><span class="line">    flexible.dpr = win.dpr = dpr;</span><br><span class="line">    flexible.refreshRem = refreshRem;</span><br><span class="line">    flexible.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) * <span class="built_in">this</span>.rem;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">&#x27;string&#x27;</span> &amp;&amp; d.match(<span class="regexp">/rem$/</span>)) &#123;</span><br><span class="line">            val += <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    flexible.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) / <span class="built_in">this</span>.rem;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">&#x27;string&#x27;</span> &amp;&amp; d.match(<span class="regexp">/px$/</span>)) &#123;</span><br><span class="line">            val += <span class="string">&#x27;rem&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>[<span class="string">&#x27;lib&#x27;</span>] || (<span class="built_in">window</span>[<span class="string">&#x27;lib&#x27;</span>] = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>创建postcss.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    file</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> rootValue</span><br><span class="line">    <span class="keyword">if</span> (file?.dirname?.indexOf?.(<span class="string">&#x27;vant&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        rootValue = <span class="number">37.5</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rootValue = <span class="number">108</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            autoprefixer(),</span><br><span class="line">            pxtorem(&#123;</span><br><span class="line">                <span class="attr">rootValue</span>: rootValue,</span><br><span class="line">                <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">                <span class="attr">minPixelValue</span>: <span class="number">2</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vw布局</p></blockquote><h4 id="持续集成（Continuous-Integration）"><a href="#持续集成（Continuous-Integration）" class="headerlink" title="持续集成（Continuous Integration）"></a>持续集成（Continuous Integration）</h4><p>/.github/workflows/hexo-deploy.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># master 分支有 push 行为时就触发这个 action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">theme-keep/hexo-deploy-github-pages-action@master</span> <span class="comment"># 使用专门部署 Hexo 到 GitHub pages 的 action</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY</span> <span class="string">&#125;&#125;</span> <span class="comment"># secret 名</span></span><br><span class="line">          <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">chenshanshu/chenshanshu.github.io</span> <span class="comment"># 公共仓库，格式：GitHub 用户名/仓库名</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># 分支，填 gh-pages 就行</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./public</span> <span class="comment"># 部署 public 目录下的文件</span></span><br></pre></td></tr></table></figure><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" >mdn-运算符<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化-图片懒加载</title>
      <link href="/2022/01/24/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/01/24/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="图片懒加载jquery插件"><a href="#图片懒加载jquery插件" class="headerlink" title="图片懒加载jquery插件"></a>图片懒加载jquery插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$, <span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$win = $(<span class="built_in">window</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Lazyload.prototype = &#123;</span><br><span class="line">        <span class="attr">constructor</span>: Lazyload,</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.loadedLen = <span class="number">0</span></span><br><span class="line">            <span class="built_in">this</span>.getImgs()</span><br><span class="line">            <span class="built_in">this</span>.onScroll()</span><br><span class="line">            <span class="built_in">this</span>.$win.on(<span class="string">&quot;scroll&quot;</span>, <span class="built_in">this</span>.debounce(<span class="built_in">this</span>.onScroll.bind(<span class="built_in">this</span>)))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">debounce</span>: <span class="function"><span class="keyword">function</span> (<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> first = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">var</span> timer;</span><br><span class="line">            <span class="keyword">var</span> gapTime = wait || <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    first = <span class="literal">false</span></span><br><span class="line">                    fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                    &#125;, gapTime)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getImgs</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.imgList = $.map($(<span class="string">&#x27;img[data-src]&#x27;</span>).get(), <span class="function"><span class="keyword">function</span> (<span class="params">i, index</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(i)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onScroll</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.loadedLen &gt;= <span class="built_in">this</span>.imgList.length) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">var</span> wTop = <span class="built_in">this</span>.$win.scrollTop();</span><br><span class="line">            <span class="keyword">var</span> wHeight = <span class="built_in">this</span>.$win.height();</span><br><span class="line">            <span class="keyword">var</span> pageTop = wHeight + wTop</span><br><span class="line">            $.each(<span class="built_in">this</span>.imgList, <span class="function"><span class="keyword">function</span> (<span class="params">index, img</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (img.loaded) <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> (pageTop - img.offset().top +<span class="number">70</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    img.attr(<span class="string">&#x27;src&#x27;</span>, img.attr(<span class="string">&#x27;data-src&#x27;</span>))</span><br><span class="line">                    img.loaded = <span class="literal">true</span></span><br><span class="line">                    <span class="built_in">this</span>.loadedLen++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.bind(<span class="built_in">this</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        <span class="attr">lazyLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Lazyload().init()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="使用IntersectionObserver实现懒加载"><a href="#使用IntersectionObserver实现懒加载" class="headerlink" title="使用IntersectionObserver实现懒加载"></a>使用IntersectionObserver实现懒加载</h2>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化-缓存篇</title>
      <link href="/2022/01/21/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96-%E7%BC%93%E5%AD%98%E7%AF%87/"/>
      <url>/2022/01/21/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96-%E7%BC%93%E5%AD%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>浏览器缓存属于必须掌握的内容，利用好缓存也是做性能优化的有效方法。</p><h4 id="为什么要缓存"><a href="#为什么要缓存" class="headerlink" title="为什么要缓存"></a>为什么要缓存</h4><ul><li>减少用户等待时间，提升用户体验，直接从内存或磁盘中取缓存数据肯定比从服务器请求更快；</li><li>减少网络带宽消耗，降低运营成本；</li><li>减少对服务端的请求，降低服务器压力。</li></ul><h4 id="缓存读写顺序"><a href="#缓存读写顺序" class="headerlink" title="缓存读写顺序"></a>缓存读写顺序</h4><span id="more"></span><h4 id="HTTP缓存返回状态码200和304的区别"><a href="#HTTP缓存返回状态码200和304的区别" class="headerlink" title="HTTP缓存返回状态码200和304的区别"></a>HTTP缓存返回状态码200和304的区别</h4><p>浏览器缓存有两种：200 OK(from memory/disk cache)和304 Not Modified，</p><table><thead><tr><th align="center"></th><th align="left">强缓存</th><th align="left">协商缓存</th></tr></thead><tbody><tr><td align="center">缓存存放位置</td><td align="left">本地浏览器</td><td align="left">本地浏览器</td></tr><tr><td align="center">http状态码</td><td align="left">200</td><td align="left">304</td></tr><tr><td align="center">参数</td><td align="left">Pragma<br/>Cache-Control<br/>Expires</td><td align="left">Etag/If-None-Match<br/>Last-Modifined/If-Modified-Since</td></tr><tr><td align="center">Ctrl+F5强制刷新<br/>F5刷新<br/>地址栏回车<br/>页面链接跳转<br/>新开窗口<br/>前进、后退<br/></td><td align="left">无效<br/>无效<br/>有效<br/>有效<br/>有效<br/>有效</td><td align="left">无效<br/>有效<br/>有效<br/>有效<br/>有效<br/>有效</td></tr></tbody></table><ol><li><p><strong>200 OK(from memory/disk cache)</strong><br>这种缓存方式很普遍，大部分网站的静态文件都采用了，表示直接读取客户端缓存，无需再请求服务器。在服务器里设置，比如Nginx配置里会有类的配置： <code>location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$&#123;expires 30d;&#125;location ~ .*\.(js|css)?$&#123;expires 12h;&#125;</code> 这样就可以给静态文件缓存了，除非用户清除缓存或者强制刷新页面，否则会直接从客户端缓存里读取</p></li><li><p><strong>304 Not Modified</strong><br>304缓存和上面最大的区别是浏览器要向服务器询问一次，如果服务器认为没有内容更新，直接返回304状态码，无需返回body内容，否则服务器返回新的资源</p></li><li><p><strong>强缓存相关header字段</strong></p><ul><li>Expires策略 <code>Expires</code> 是Web服务器响应消息头字段，代表过期时间</li><li>Cache-control策略（重点关注）<code>Cache-Control</code> 与 <code>Expires</code> 的作用一致，都是指明当前资源的<strong>有效期</strong>，只不过 <code>Cache-Control</code> 的选项更多，若同时设置，优先级高于 <code>Expires</code></li><li>http协议头Cache-Control各指令及含义如下：<ul><li>Public指示响应可被任何缓存区缓存。</li><li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。</li><li>no-cache指示请求或响应消息不能缓存</li><li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li><li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</li><li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</li><li>max-stale指示客户机可以接收超出超时期间的响应消息 。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</li></ul></li></ul></li><li><p><strong>协商缓存相关的header字段</strong></p><ul><li>Last-Modifined/If-Modified-Since<ul><li>Last-Modified/If-Modified-Since要配合Cache-Control使用。</li><li>Last-Modified：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。</li><li>If-Modified-Since：当资源过期时（浏览器判断Cache-Control标识的max-age过期），发现响应头具有Last-Modified声明，则再次像服务器请求时带上头if-modified-since，表示请求时间。服务器收到请求后发现有if-modified-since则与被请求资源的最后修改时间进行对比（Last-Modified）,若最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK;若最后修改时间较旧（小），说明资源无新修改，响应HTTP 304 走缓存。</li></ul></li><li>Etag/If-None-Match<ul><li>Etag：服务器响应时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</li><li>If-None-Match：当资源过期时，浏览器发现响应头里有Etag,则再次像服务器请求时带上请求头if-none-match(值是Etag的值)。服务器收到请求进行比对，决定返回200或304</li></ul></li></ul></li></ol><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><blockquote><p><a class="link"   href="https://bubuzou.com/2020/12/20/browser-cache/" >浏览器专题之缓存篇<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.jianshu.com/p/227cee9c8d15" >一文读懂http缓存（超详细）<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.jianshu.com/p/256d0873c398" >前端缓存详解<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 浏览器缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端questions</title>
      <link href="/2022/01/20/%E5%89%8D%E7%AB%AF-question/"/>
      <url>/2022/01/20/%E5%89%8D%E7%AB%AF-question/</url>
      
        <content type="html"><![CDATA[<h4 id="定义函数的两种方式"><a href="#定义函数的两种方式" class="headerlink" title="定义函数的两种方式"></a>定义函数的两种方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （1）函数表达式</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数表达式形式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// （2）函数申明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数申明形式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a() <span class="comment">//函数表达式形式</span></span><br></pre></td></tr></table></figure><p>两种方式的区别：函数申明会提升，可以在定义函数之前调用该函数</p><span id="more"></span><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">200</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">f(a = <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h4 id="浏览器渲染html步骤"><a href="#浏览器渲染html步骤" class="headerlink" title="浏览器渲染html步骤"></a>浏览器渲染html步骤</h4><p>1、解析html:会按顺序解析，浏览器有专门的html解析器来解析HTML，并在解析的过程中构建DOM树<br>2、构建dom树：它和步骤(1) 是同步进行，可以理解为边解析边构建。<br>3、构建呈现树renderTree：将dom树与css结合，也就是将样式应用到dom节点上<br>4、布局：计算呈现树节点的大小和位置，这一位置是递归进行的。<br>5、绘制：布局完成后，便是将呈现树绘制出来显示在屏幕上。</p><h4 id="什么是回流和重绘"><a href="#什么是回流和重绘" class="headerlink" title="什么是回流和重绘"></a>什么是回流和重绘</h4><p>pc端问题不大，移动端会导致页面卡顿</p><ul><li>回流 reflow:当呈现树renderTree中的一部分或全部因为尺寸、布局、隐藏等改变改重新构建，称之为回流。</li><li>重绘：当呈现树renderTree中的一部分元素需要更新属性，而属性只会影响外观、风格而不影响布局，比如颜色、字体大小等，则称之为重绘。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件模型</title>
      <link href="/2022/01/19/js%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/01/19/js%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="DOM0级事件模型"><a href="#DOM0级事件模型" class="headerlink" title="DOM0级事件模型"></a>DOM0级事件模型</h4><p>  DOM0级事件模型是早期事件模型，实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><em>直接在<code>DOM</code> 对象上注册事件</em></li><li><em>注册多个时后面的事件<mark>会覆盖之前的</mark></em></li><li><em>所有浏览器都兼容</em></li><li><em>清除事件时直接赋值null</em></li></ul><hr/><h4 id="DOM2级事件模型"><a href="#DOM2级事件模型" class="headerlink" title="DOM2级事件模型"></a>DOM2级事件模型</h4><h5 id="标准事件模型"><a href="#标准事件模型" class="headerlink" title="标准事件模型"></a>标准事件模型</h5><h6 id="事件传播过程"><a href="#事件传播过程" class="headerlink" title="事件传播过程"></a>事件传播过程</h6><pre><code>1. 事件捕获：事件由`document`一直向下捕捉到目标元素2. 事件执行：目标对象的事件处理程序执行3. 事件冒泡：事件从目标元素上升到`document`</code></pre><p>  所有时间类型都会经历第一阶段，有的事件不会经历第三阶段（submit），一个 <code>DOM</code> 对象可以注册多个相同类型的事件，不会发生覆盖。</p><h6 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[object].addEventListener(&#x27;事件名称&#x27;，方法名（函数），事件模型（true/false）)</span><br></pre></td></tr></table></figure><h6 id="解除事件"><a href="#解除事件" class="headerlink" title="解除事件"></a>解除事件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[object].removeEventListener(&#x27;事件名称&#x27;，方法名（函数），事件模型（true/false）)</span><br></pre></td></tr></table></figure><p>true/false决定在那个阶段调用函数<br>true: 捕获<br>false: 冒泡</p><h6 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h6><ul><li>停止传播：event.stopPropagation()</li><li>阻止默认动作：event.preventDefault()</li></ul><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><ul><li>给一个元素添加两个事件，捕获阶段的事件会先执行，但两个时间戳相同。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn__submit&#x27;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;in bubble&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;in capture&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><ul><li>绑定多个事件，并阻止冒泡<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    params.stopPropagation()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>在冒泡阶段阻止冒泡，在捕获阶段的绑定事件会先执行，三个事件都会触发<br>在捕获阶段阻止冒泡，第一个事件不再触发，后两个触发。</li></ul><span id="more"></span><h5 id="IE模型"><a href="#IE模型" class="headerlink" title="IE模型"></a>IE模型</h5><p>  IE的事件机制没有捕获阶段，事件流是非标准的，只有目标阶段和冒泡阶段。</p><ul><li>添加事件：dom.attachEvent()</li><li>移除事件：dom.detachEvent()</li><li>阻止冒泡：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="built_in">window</span>.event;</span><br><span class="line">e.cancelBubble = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li>阻止默认事件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.returnValue = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li>标准事件模型中，注册函数时，事件类型前不加on,IE中要加on</li><li>attachEvent注册的函数为全局调用函数，而不是文档元素的方法，因此this引用的是window对象</li><li>注册多个处理函数时，标准事件模型中，若注册多个同名函数会被忽略，以第一个为准；在<code>IE</code>中，同一个函数可以被注册多次</li></ul><h4 id="DOM3级事件"><a href="#DOM3级事件" class="headerlink" title="DOM3级事件"></a>DOM3级事件</h4><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：</p><ul><li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll、abort、select、error</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</li><li>同时DOM3级事件也允许使用者自定义一些事件。</li></ul><p>UI事件在DOM2级事件中归为HTML事件，判断浏览器是否支持DOM2级别事件中的HTML事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSupported = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">&quot;HTMLEvents&quot;</span>,<span class="string">&quot;2.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>判断浏览器是否支持DOM3级事件规定的UI事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSupported = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">&quot;UIEvents&quot;</span>,<span class="string">&quot;3.0&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="自定义事件（Event和CustomEvent）"><a href="#自定义事件（Event和CustomEvent）" class="headerlink" title="自定义事件（Event和CustomEvent）"></a>自定义事件（Event和CustomEvent）</h5><ul><li>Event<blockquote><p>Event算是一个顶级接口，CustomEvent基于Event,增加了部分参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(typeArg[, eventInit]);</span><br></pre></td></tr></table></figure></li></ul><p><strong>eventInit:</strong></p><table><thead><tr><th align="left">参数</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">bubbles</td><td align="left">可选，Boolean类型，默认值为 false，表示该事件是否冒泡。</td></tr><tr><td align="left">cancelable</td><td align="left">可选，Boolean类型，默认值为 false， 表示该事件能否被取消。</td></tr><tr><td align="left">composed</td><td align="left">可选，Boolean类型，默认值为 false，指示事件是否会在影子DOM根节点之外触发侦听器。</td></tr></tbody></table><p><strong>example:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="keyword">new</span> Event(<span class="string">&quot;test&quot;</span>, &#123;<span class="string">&quot;bubbles&quot;</span>:<span class="literal">true</span>, <span class="string">&quot;cancelable&quot;</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;触发了自定义事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(evt);</span><br></pre></td></tr></table></figure><ul><li>CustomEvent<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(typeArg,customEventInit);</span><br></pre></td></tr></table></figure></li></ul><p><strong>customEventInit:</strong></p><table><thead><tr><th align="left">参数</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">detail</td><td align="left">可选的默认值是 null 的任意类型数据，是一个与 event 相关的值（向事件对象添加更多数据）</td></tr></tbody></table><p>customEventInit可以接受eventInit字典的参数</p><blockquote><p>以上内容参考了下列文章<br>CSDN:<a class="link"   href="https://blog.csdn.net/weixin_41440282/article/details/81207302" >事件模型<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GithubAction和Webhook使用入门</title>
      <link href="/2022/01/11/GithubAction%E5%92%8CWebhook%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2022/01/11/GithubAction%E5%92%8CWebhook%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Github-Action"><a href="#什么是Github-Action" class="headerlink" title="什么是Github Action"></a>什么是Github Action</h2><ul><li><code>Github Action</code>是Github官方推出的持续集成/部署模块服务(CI/CD)。</li><li>它是事件驱动的，而且与Github深度整合，可以运行很多Github事件，除了部署和发布，还可以做很多事情，例如压缩合并<code>css</code>和<code>JavaScript</code>。</li></ul><h2 id="什么是Webhook"><a href="#什么是Webhook" class="headerlink" title="什么是Webhook"></a>什么是Webhook</h2><ul><li><code>Webhook</code>是一个<code>API</code>概念，术语“网络钩子”，有时也被称为“反向 API”。因为它提供了<code>API</code>规则，<code>Webhook</code>将向你的应用发起<code>http</code>请求。</li><li>准确的说<code>Webhook</code>是一种web回调或者http的<code>push API</code>，可以使用<code>Webhook</code>“订阅”活动。</li></ul><h2 id="hexo自动打包发布通知流程"><a href="#hexo自动打包发布通知流程" class="headerlink" title="hexo自动打包发布通知流程"></a>hexo自动打包发布通知流程</h2><ol><li>本地编写完，通过<code>git</code>提交到<code>Github</code>仓库</li><li><code>Github Action</code>监听到<code>push event</code>事件触发<code>ci.yml</code>执行脚本</li><li><code>build</code>打包生成部署文件推送到目标仓库</li><li>设置<code>webhook</code>监听推送事件，执行<code>webhook.sh</code>脚本</li><li>将结果进行邮件通知</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>第一步，在<code>github</code> <code>setting-&gt;Developer settings-&gt;Personal access tokens</code>创建新的token，并保存这个值；<br>第二步，进入源代码仓库，<code>Settings-&gt;Secrets</code>里将第一步的token添加进去，<code>SECRET_NAME</code>取名为<code>HEXO_DEPLOY</code>；<br>第三步，新建一个<code>Github仓库</code>，命名为<code>用户名.github.io</code>,启动<code>github-pages</code>,具体可参考官方文档；</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分享 2021/12/31</title>
      <link href="/2021/12/31/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2021-12-31/"/>
      <url>/2021/12/31/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2021-12-31/</url>
      
        <content type="html"><![CDATA[<h2 id="reduce-的用法"><a href="#reduce-的用法" class="headerlink" title="reduce()的用法"></a>reduce()的用法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback,[initialValue])</span><br></pre></td></tr></table></figure><ol><li>数组求和</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prev + cur;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>计算一个数组中每个元素出现的次数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sun&#x27;</span>, <span class="string">&#x27;mon&#x27;</span>, <span class="string">&#x27;wen&#x27;</span>, <span class="string">&#x27;sun&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur <span class="keyword">in</span> pre) &#123;</span><br><span class="line">        pre[cur]++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pre[cur] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>数组去重</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pre.includes(cur)) &#123;</span><br><span class="line">        pre.push(cur)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><ol start="4"><li>将多维数组转为一维</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> newArr = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre.concat(<span class="built_in">Array</span>.isArray(cur) ? newArr(cur) : cur), [])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr(arr)); <span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Vuex数据保存问题"><a href="#Vuex数据保存问题" class="headerlink" title="Vuex数据保存问题"></a>Vuex数据保存问题</h2><ul><li>Vuex存储在内存，数据刷新就会丢失，无内存大小限制，而Storage最大为5M。数据为响应式，用于组件间传值。</li><li>sessionStorage 用于临时保存数据，标签页关闭后数据删除</li><li>localStorage 可以在多个标签页共享没有过期时间，除非手动删除</li></ul><p>question: 移动端页面进行支付时页面会进行刷新, 导致Vuex存储的数据丢失了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getState = <span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&quot;state&quot;</span>) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> setState = <span class="function"><span class="params">state</span> =&gt;</span> <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;state&#x27;</span>, <span class="built_in">JSON</span>.stringify(state || &#123;&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="literal">null</span>,</span><br><span class="line">        ...getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">SETNAME</span>(<span class="params">state, v</span>)</span> &#123;</span><br><span class="line">            state.name = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">setName</span>(<span class="params">context, val</span>)</span> &#123;</span><br><span class="line">            context.commit(<span class="string">&quot;SETNAME&quot;</span>, val)</span><br><span class="line">            setState(context.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="scrollHeight用法"><a href="#scrollHeight用法" class="headerlink" title="scrollHeight用法"></a>scrollHeight用法</h2>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reduce </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-auth</title>
      <link href="/2021/10/19/flask-auth/"/>
      <url>/2021/10/19/flask-auth/</url>
      
        <content type="html"><![CDATA[<h2 id="一、windows系统python3虚拟环境"><a href="#一、windows系统python3虚拟环境" class="headerlink" title="一、windows系统python3虚拟环境"></a>一、windows系统python3虚拟环境</h2><ul><li>新建文件夹venv，然后执行<code>python -m venv venv</code></li><li>运行<code>.\Scripts\activate.bat</code>启动虚拟环境<div class="tip">cmd中需要使用反斜线，否则无法启动</div></li></ul><h2 id="二、Flask服务"><a href="#二、Flask服务" class="headerlink" title="二、Flask服务"></a>二、Flask服务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过route()装饰器来把函数绑定到URL</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hellow world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#app对象的add_url_rule()函数也可以用于将URL与函数绑定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,hello_word)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/path/&lt;path:subpath&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span>(<span class="params">subpath</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;subpath <span class="subst">&#123;escape(subpath)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="转换器类型："><a href="#转换器类型：" class="headerlink" title="转换器类型："></a>转换器类型：</h3><p>URL内用中括号标记变量，通过<a class="link"   href="converter:variable_name" >converter:variable_name<i class="fas fa-external-link-alt"></i></a>为变量加上转换器</p><table><thead><tr><th align="center">字段</th><th align="right">说明</th></tr></thead><tbody><tr><td align="center"><code>string</code></td><td align="right">（缺省值）接受任何不包含斜杆的文本</td></tr><tr><td align="center"><code>int</code></td><td align="right">接受正整数</td></tr><tr><td align="center"><code>float</code></td><td align="right">接受正浮点数</td></tr><tr><td align="center"><code>path</code></td><td align="right">类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td align="center"><code>uuid</code></td><td align="right">接受 UUID 字符串</td></tr></tbody></table><h3 id="URL构建"><a href="#URL构建" class="headerlink" title="URL构建"></a>URL构建</h3><p>url_for()函数用于构建指定函数的URL, 函数名称作为第一个参数，可接受任意个关键字参数</p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>只要在您的包或模块旁边创建一个名为 static 的文件夹就行了。 静态文件位于应用的 /static 中。<br> <code>url_for(&#39;static&#39;, filename=&#39;style.css&#39;)</code></p><h2 id="三、Flask服务启动"><a href="#三、Flask服务启动" class="headerlink" title="三、Flask服务启动"></a>三、Flask服务启动</h2><ul><li>安装Flask模块<code>pip install Flask</code></li><li>编写好脚本保存为<code>server.py</code></li><li><code>set FLASK_APP=server</code>  </li><li>需要打开开发功能<code>set FLASK_ENV=development</code></li><li>运行<code>flask run</code></li></ul><span id="more"></span><h2 id="四、更多用法"><a href="#四、更多用法" class="headerlink" title="四、更多用法"></a>四、更多用法</h2><h3 id="4-1、日志"><a href="#4-1、日志" class="headerlink" title="4.1、日志"></a>4.1、日志</h3><p>调用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.logger.debug(<span class="string">&#x27;A value for debugging&#x27;</span>)</span><br><span class="line">app.logger.warning(<span class="string">&#x27;A warning occurred (%d apples)&#x27;</span>, <span class="number">42</span>)</span><br><span class="line">app.logger.error(<span class="string">&#x27;An error occurred&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2、Flask概述"><a href="#4-2、Flask概述" class="headerlink" title="4.2、Flask概述"></a>4.2、Flask概述</h3><p><strong>什么是Web Framework?</strong><br>Web Application Framework(web应用程序框架)或简单的Web Framework(Web框架)表示一个库和模块的集合，使Web应用程序开发人员能够编写应用程序，而不必担心协议，线程管理等低级细节。</p><p><strong>什么是Flask?</strong><br>Flask是一个用Python编写的Web应用程序框架。Flask基于Werkzeug WSGI工具包和Jinja2模板引擎。</p><p><strong>WSGI</strong><br>Web Server Gateway Interface(Web服务器网关接口，WSGI)已被用作Python Web应用程序开发的标准。WSGI是Web服务器和Web应用程序之间通用接口的规范</p><p><strong>Werkzeug</strong><br>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。这使得能够在其上构建Web框架。</p><p><strong>jinja2</strong><br>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> Oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css整理</title>
      <link href="/2021/07/28/css%E6%95%B4%E7%90%86/"/>
      <url>/2021/07/28/css%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h5><p>商品详情页，主图缓动效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: sticky;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">1px</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line"><span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种避免重复请求的方法</title>
      <link href="/2021/06/21/%E4%B8%80%E7%A7%8D%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/06/21/%E4%B8%80%E7%A7%8D%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>1、需求：小程序在app.js中需要发起一个login请求，在index的onLoad()钩子里要拿到login的返回值进行后续操作。<br>2、通过该方法可以避免在第一次请求未完成时发出第二个请求。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *一种避免重复请求的方法,不支持async</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@arg</span></span></span><br><span class="line"><span class="comment"> * arg[0]idString</span></span><br><span class="line"><span class="comment"> * arg[1]promise函数Function</span></span><br><span class="line"><span class="comment"> * arg[2]arg[1]的参数Object</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">let</span> emiter = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Emiter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">...arg</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> unionKey = <span class="string">&#x27;emiter-&#x27;</span> + arg[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">this</span>.emiter = emiter[unionKey] = emiter[unionKey] || &#123;</span><br><span class="line"><span class="attr">resolveQueue</span>: [],</span><br><span class="line"><span class="attr">rejectQueue</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.methods = arg[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span>.methods !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.emiter.promiseStatus === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.emitAll(<span class="built_in">this</span>.emiter.resolveQueue, <span class="built_in">this</span>.emiter.res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.emiter.promiseStatus) &#123;</span><br><span class="line"><span class="built_in">this</span>.emiter.promiseStatus = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.methods(arg[<span class="number">2</span>] || &#123;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">this</span>.emiter.promiseStatus</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">this</span>.emiter.promiseStatus = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.emiter.res = res</span><br><span class="line"><span class="built_in">this</span>.emitAll(<span class="built_in">this</span>.emiter.resolveQueue, res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">this</span>.emiter.promiseStatus</span><br><span class="line"><span class="built_in">this</span>.emitAll(<span class="built_in">this</span>.emiter.rejectQueue, err)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">emitAll</span>(<span class="params">queue, res</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.emiter.promiseStatus === <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">queue[<span class="number">0</span>](res)</span><br><span class="line">queue.shift()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (callback &amp;&amp; <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.emiter.resolveQueue.push(callback)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (callback) &#123;</span><br><span class="line"><span class="keyword">if</span> (callback &amp;&amp; <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.emiter.rejectQueue.push(callback)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123; resolve(<span class="string">&#x27;REQUEST SUCCESS&#x27;</span>) &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Emiter(<span class="string">&#x27;union-id&#x27;</span>, fun).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器下载文件</title>
      <link href="/2021/04/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2021/04/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器打印功能</title>
      <link href="/2021/04/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/04/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>打印API：<br>window.print()</p></blockquote><h3 id="需求：打印局部内容，如打印下面页面类名-printBox-里面的内容"><a href="#需求：打印局部内容，如打印下面页面类名-printBox-里面的内容" class="headerlink" title="需求：打印局部内容，如打印下面页面类名 printBox 里面的内容"></a>需求：打印局部内容，如打印下面页面类名 <strong>printBox</strong> 里面的内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>页面内容...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;printBtn&quot;</span>&gt;</span>打印报告<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;printContent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;printBox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>打印报告<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>报告内容...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="实现：已知A4纸张尺寸为297mm-210mm，通过创建-iframe-来实现打印；"><a href="#实现：已知A4纸张尺寸为297mm-210mm，通过创建-iframe-来实现打印；" class="headerlink" title="实现：已知A4纸张尺寸为297mm*210mm，通过创建 iframe 来实现打印；"></a>实现：已知A4纸张尺寸为297mm*210mm，通过创建 <strong>iframe</strong> 来实现打印；</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> frameId = <span class="string">&#x27;printFrame&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>portrait 是否纵向打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span>(<span class="params">portrait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(frameId);</span><br><span class="line">    <span class="keyword">if</span>(!iframe)&#123;</span><br><span class="line">        <span class="keyword">var</span> frameStyle = portrait ?</span><br><span class="line">        <span class="string">`&lt;style&gt;@page&#123;size:A4 portrait;margin:0mm;width:297mm;min-height:200mm;&#125;&lt;/style&gt;`</span>:</span><br><span class="line">        <span class="string">`&lt;style&gt;@page&#123;size:A4 landscape;margin:0mm;width:210mm;min-height:280mm;&#125;&lt;/style&gt;`</span>;</span><br><span class="line">        <span class="comment">// 当高度设置为最大值，会出现打印内容后面多出一张空白页</span></span><br><span class="line">        <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;printContent&quot;</span>);</span><br><span class="line">        iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;IFRAME&#x27;</span>);</span><br><span class="line">        iframe.setAttribute(frameId);</span><br><span class="line">        iframe.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;position:absolute;width:0px;height:0px;left:-500px;top:-500px;&#x27;</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">        <span class="keyword">var</span> doc = iframe.contentWindow.document;</span><br><span class="line">        doc.write(frameStyle);</span><br><span class="line">        doc.write(<span class="string">`&lt;div&gt;<span class="subst">$&#123;el.innerHTML&#125;</span>&lt;/div&gt;`</span>);</span><br><span class="line">        doc.close();</span><br><span class="line">        iframe.contentWindow.focus();  </span><br><span class="line">    &#125;</span><br><span class="line">    iframe.contentWindow.print();</span><br><span class="line">    <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">&quot;MSIE&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>当打印内容带有背景时候记得勾选背景图形选项</li><li>此处只测试了Chrome，兼容性未处理</li></ul><h3 id="扩展：打印机型号不同时打印内容也有差别，所以可以通过用canvas来绘制内容-可以参考微信小程序生成分享图功能-，然后生成图片放入第二步的iframe中。"><a href="#扩展：打印机型号不同时打印内容也有差别，所以可以通过用canvas来绘制内容-可以参考微信小程序生成分享图功能-，然后生成图片放入第二步的iframe中。" class="headerlink" title="扩展：打印机型号不同时打印内容也有差别，所以可以通过用canvas来绘制内容(可以参考微信小程序生成分享图功能)，然后生成图片放入第二步的iframe中。"></a>扩展：打印机型号不同时打印内容也有差别，所以可以通过用canvas来绘制内容(<font color=green>可以参考微信小程序生成分享图功能</font>)，然后生成图片放入第二步的iframe中。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Components</title>
      <link href="/2020/11/06/web-components/"/>
      <url>/2020/11/06/web-components/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Shadow-DOM"><a href="#The-Shadow-DOM" class="headerlink" title="The Shadow DOM"></a>The Shadow DOM</h2><p>通过shadow DOM在文档流中创建一些完全独立于其他元素的子DOM树（sub-DOM trees），由于这个特性，使我们能封装一个具有独立功能的组件，并且可以保证不会干扰到其它DOM元素</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>Chrome、Opera、Chrome for Android</p><h2 id="WebComponents的重要性"><a href="#WebComponents的重要性" class="headerlink" title="WebComponents的重要性"></a>WebComponents的重要性</h2><ul><li>开发无害插件（主页面样式不会修改组件样式）</li><li>能开发更通用的组件</li><li>可维护</li></ul>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache配置</title>
      <link href="/2020/10/28/Apache%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/10/28/Apache%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="wamp安装及配置反向代理"><a href="#wamp安装及配置反向代理" class="headerlink" title="wamp安装及配置反向代理"></a>wamp安装及配置反向代理</h2><ol><li><p>安装wamp，也可安装apache</p><blockquote><p><a class="link"   href="http://www.wampserver.com/en/" >下载地址<i class="fas fa-external-link-alt"></i></a> “<a class="link"   href="http://www.wampserver.com/en/&quot;" >http://www.wampserver.com/en/&quot;<i class="fas fa-external-link-alt"></i></a></p></blockquote></li><li><p>配置apache使外网访问（版本2.4.27）</p><ul><li>修改httpd.conf文件<pre><code>Require all denied  ==&gt;  Require all grantedRequire local  ==&gt; Require all grantedListen 0.0.0.0:8000 //搜索 Listen 0.0.0.0:80 添加对8000端口的监听</code></pre></li><li>修改httpd-vhosts.conf文件<pre><code>Require all denied ==&gt; Require all granted//至此别人可以访问你的www目录下的静态内容</code></pre></li></ul></li><li><p>设置花生壳内网穿透（有公网ip的忽略）</p><blockquote><p>填写你的局域网ip,端口,获得外网访问地址</p></blockquote></li><li><p>配置Apache反向代理nodejs服务</p><ul><li><p>修改httpd.conf文件</p><pre><code>//去掉下列内容的注释，引入代理模块LoadModule proxy_module modules/mod_proxy.soLoadModule proxy_http_module modules/mod_proxy_http.so//如需ftp，取消如下注释LoadModule proxy_ftp_module modules/mod_proxy_ftp.so</code></pre></li><li><p>修改httpd-vhosts.conf文件</p><pre><code>//添加下列代码&lt;VirtualHost *:8000&gt; //不放在80端口上防止影响phpMyAdmin    ServerName 20xr498049.imwork.net //外网访问的域名    ServerAlias www.20xr498049.imwork.net:42685 //别名    #DocumentRoot &quot;$&#123;INSTALL_DIR&#125;/www&quot;     &lt;Proxy *&gt;        Order allow,deny        Allow from all    &lt;/Proxy&gt;    &lt;Location /&gt;          ProxyPass http://localhost:3000/  //node访问地址        ProxyPassReverse http://localhost:3000/      &lt;/Location&gt;  &lt;/VirtualHost&gt;</code></pre></li></ul></li><li><p>开启nodejs项目，重启apache服务。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 手册</title>
      <link href="/2020/10/28/git-%E6%89%8B%E5%86%8C/"/>
      <url>/2020/10/28/git-%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h3><hr><h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><table><thead><tr><th align="left">操作</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">新建本地新分支</td><td align="left"><code>git branch branch</code></td></tr><tr><td align="left">新建并切换到本地新分支</td><td align="left"><code>git checkout -b branch</code></td></tr><tr><td align="left">新建远程分支</td><td align="left"><code>git push origin branch:remoteBranch</code></td></tr><tr><td align="left">删除本地分支</td><td align="left"><code>git branch -d dev</code></td></tr><tr><td align="left">删除远程分支</td><td align="left"><code>git push origin :remoteBranch</code></td></tr><tr><td align="left">设置本地追踪远程分支</td><td align="left"><code>git branch --set-upstream-to=origin/remoteBranch localBranch</code></td></tr><tr><td align="left">直接将远程分支拉取并在本地建立关联分支</td><td align="left"><code>git checkout -b localBranch origin/remoteBranch</code>    <br><code>or</code><br><code>git fetch origin master:test</code></td></tr></tbody></table><h5 id="强制操作"><a href="#强制操作" class="headerlink" title="强制操作"></a>强制操作</h5><table><thead><tr><th align="left">操作</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">强制覆盖本地修改</td><td align="left"><code>git fetch --all</code><br><code>git reset --hard origin/master</code><br><code>git pull</code></td></tr><tr><td align="left">强制上传</td><td align="left"><code>git push -f origin remoteBranch</code></td></tr></tbody></table><h5 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h5><table><thead><tr><th align="left">操作</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">查看本地分支与远程关联情况</td><td align="left"><code>git branch -vv</code></td></tr><tr><td align="left">查看本地仓库状态</td><td align="left"><code>git status</code></td></tr><tr><td align="left">查看本地操作</td><td align="left"><code>git reflog</code></td></tr><tr><td align="left">比较本地与远程</td><td align="left"><code>git log -p master  ..origin/master</code></td></tr><tr><td align="left">查看某个提交</td><td align="left"><code>git show commitID</code></td></tr><tr><td align="left">修改主机地址</td><td align="left"><code>git remote set-url origin ssh.aaaa.git</code><br><code>or</code><br><code>git remote rm origin</code><br><code>git remote add origin [url]</code></td></tr><tr><td align="left">版本回退</td><td align="left"><code>git reset --hard commitID</code></td></tr><tr><td align="left">版本回滚</td><td align="left"><code>git revert HEAD</code></td></tr><tr><td align="left">将指定的提交（commit）应用于其他分支</td><td align="left"><code>git cherry-pick commitID</code>//分支名</td></tr><tr><td align="left">Cherry pick 支持一次转移多个提交</td><td align="left"><code>git cherry-pick A^..B</code>//包含A和B</td></tr></tbody></table><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 笔记</title>
      <link href="/2020/10/28/linux-shell%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/10/28/linux-shell%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>几个常用命令</p><span id="more"></span><h2 id="raspberry-安装nginx"><a href="#raspberry-安装nginx" class="headerlink" title="raspberry 安装nginx"></a>raspberry 安装nginx</h2><ul><li>sudo apt-get install nginx</li><li>sudo /etc/init.d/nginx start <strong>启动</strong></li><li>curl -I localhost:80 <strong>测试能否访问</strong></li><li>sudo nano /etc/nginx/sites-available/default    <strong>修改端口</strong></li><li>sudo /etc/init.d/nginx reload     <strong>重启</strong></li></ul><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><ul><li>useradd chenss <strong>添加用户</strong></li><li>userdel chenss <strong>删除用户</strong></li><li>usermod -a -G user chenss <strong>添加用户组</strong></li><li>usermod -g user chenss <strong>修改用户主组</strong></li><li>newgrp root <strong>切换用户主从组</strong></li><li>groupadd groupname <strong>添加组</strong></li><li>groupmod -n new_name： 修改组名</li><li>groupdel groupname <strong>删除组</strong></li><li>groupmems -g groupname [action]</li></ul><p>/* -a, –add username: 指定用户加入组；<br>-d, –delete username: 从组中删除用户；<br>-p, –purge : 从组中清除所有成员；<br>-l, –list: 显示组成员列表; */</p><ul><li>gpasswd -a chenss user <strong>给组添加用户</strong></li><li>gpasswd -d chenss user <strong>删除组中用户</strong></li></ul><h3 id="主要配置文件"><a href="#主要配置文件" class="headerlink" title="主要配置文件"></a>主要配置文件</h3><ul><li>/etc/passwd: 用户及其属性信息(名称，UID, 主组ID)</li><li>/etc/shadow: 用户密码及相关属性。</li><li>/etc/group: 组及其属性信息。</li><li>/etc/gshadow: 组密码及相关属性。</li><li>/etc/wpa_supplicant/wpa_supplicant.conf: WiFi管理</li></ul><h3 id="redesktop使用文档"><a href="#redesktop使用文档" class="headerlink" title="redesktop使用文档"></a>redesktop使用文档</h3><hr><ul><li>apt-get install redesktop</li><li>ctrl+alt+t //打开终端</li><li>rdesktop -f -a 32 -u username -p password ip:port //-f 全屏</li><li>ctrl+alt+enter //切换全屏</li><li>ctrl+alt+F2 //进入字符终端杀死进程</li><li>sudo pkill rdesktop</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手webpack</title>
      <link href="/2020/10/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bwebpack/"/>
      <url>/2020/10/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bwebpack/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p><em>webpack是一个前端资源加载/打包工具。</em></p></blockquote><p>它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要先安装好nodejs, 然后执行下列操作；<strong>可能遇到的问题，linux下通过sudo获得管理员权限安装，windows下开始搜索cmd, 右键以管理员身份运行才能安装以下内容；但是在vscode、webstorm等控制台可以直接安装。</strong></p><pre><code>mkdir webpacktestcd webpacktestnpm init -f-ynpm i webpack -D /*i == install ; -D == --dev--save ; */npm i webpack-cli -D /*webpack4提示需要安装这个才能使用*/</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装后webpack模块就被安装到项目里的node_modules文件夹下面；新建文件demo1.js，写入你想执行的js代码。</p><p>网上大部分教程都是在linux下的执行命令，这里讲一下windows下的使用方法。</p><pre><code>.\node_modules\.bin\webpack demo1.js -o bundle.js --mode development</code></pre><p>至此完成了第一次的代码打包。</p><h2 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h2><p>在项目根目录下新建<strong>webpack.config.js</strong>；新建src文件夹，以后自己编写的代码全部放在这个文件夹下面；新建dist文件夹用来存放打包后的文件。</p><pre><code>const path = require('path'); const config = &#123;    mode:'development',    entry:&#123;        main:path.resolve(__dirname,"./src","index.js")    &#125;,    output:&#123;        path:path.resolve(__dirname,'dist'),        filename:'bundle.js'    &#125;,    module:&#123;        rules:[            &#123;                test:/\.css$/,                use:[                    "style-loader",                    "css-loader"                ]            &#125;        ]    &#125;&#125;; module.exports = config; </code></pre><p>有了配置文件后可以用以下命令就能执行打包了</p><pre><code>.\node_modules\.bin\webpack</code></pre><p>使用起来还是不方便，可以把命令加到package.json里；注意这里只需要提供包名，node会自动找到包所在目录。</p><pre><code>"scripts": &#123;    "start": "webpack",  &#125;</code></pre><p>现在可以在命令行使用下面命令打包</p><pre><code>npm start /*注意，当命令指定的为start时候可以省去run*/markdown预览 ctrl+shift+v</code></pre>]]></content>
      
      
      <categories>
          
          <category> 快速上手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/10/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/10/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<pre>^((?!\d*$)\S{2, })|(\d{6, })$//超过2个字符或者超过6位纯数字</pre><h5 id="匹配某个变量"><a href="#匹配某个变量" class="headerlink" title="匹配某个变量"></a>匹配某个变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch = <span class="string">&#x27;变量&#x27;</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">`/<span class="subst">$&#123;ch&#125;</span>/g`</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(ch,<span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件的三种调用方式</title>
      <link href="/2020/06/04/vue%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/06/04/vue%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、注册组件，直接调用"><a href="#一、注册组件，直接调用" class="headerlink" title="一、注册组件，直接调用"></a>一、注册组件，直接调用</h2><p>这种比较常见</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-dialog</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> MyDialog <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;my-dialog&#x27;</span>: MyDialog</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、通过js调用"><a href="#二、通过js调用" class="headerlink" title="二、通过js调用"></a>二、通过js调用</h2><p>使用场景：登陆弹窗，付费弹窗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VipPop <span class="keyword">from</span> <span class="string">&#x27;./VipPop&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipPopup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">Vue, options</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vipPop = Vue.extend(VipPop);</span><br><span class="line">        <span class="built_in">this</span>.popupInstance = <span class="keyword">new</span> <span class="built_in">this</span>.vipPop(&#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;成为VIP，开启新特权&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propsData</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">extends</span>: options</span><br><span class="line">        &#125;).$mount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">        obj.title &amp;&amp; (<span class="built_in">this</span>.popupInstance.title = obj.title);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.el) &#123;</span><br><span class="line">            <span class="built_in">this</span>.el.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.el = <span class="built_in">this</span>.popupInstance.$el;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(<span class="built_in">this</span>.el)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;van-overflow-hidden&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;van-overflow-hidden&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.el &amp;&amp; (<span class="built_in">this</span>.el.style.display = <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;van-overflow-hidden&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.el &amp;&amp; <span class="built_in">this</span>.el.remove();</span><br><span class="line">        <span class="built_in">this</span>.el = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">install</span>: <span class="function"><span class="keyword">function</span>(<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">            Vue.prototype.$vipPop = <span class="keyword">new</span> VipPopup(Vue, options);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.van-overflow-hidden</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/**禁止背景滚动条**/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main.js中引入这个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VipPop <span class="keyword">from</span> <span class="string">&#x27;@/components/VipPop&#x27;</span></span><br><span class="line">Vue.use(VipPop, &#123;</span><br><span class="line">    router,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、以指令的形式调用"><a href="#三、以指令的形式调用" class="headerlink" title="三、以指令的形式调用"></a>三、以指令的形式调用</h2><p>使用场景：加载动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> LoadingConstructor = Vue.extend(<span class="built_in">require</span>(<span class="string">&#x27;./Loading.vue&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">install</span>: <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.directive(<span class="string">&#x27;loading&#x27;</span>, &#123; <span class="comment">// 指令的关键</span></span><br><span class="line">            <span class="attr">bind</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> loading = <span class="keyword">new</span> LoadingConstructor(&#123; <span class="comment">// 实例化一个loading</span></span><br><span class="line">                    <span class="attr">el</span>: <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">                    <span class="attr">data</span>: &#123;</span><br><span class="line">                        <span class="attr">text</span>: el.getAttribute(<span class="string">&#x27;loading-text&#x27;</span>), <span class="comment">// 通过loading-text属性获取loading的文字</span></span><br><span class="line">                        <span class="attr">fullscreen</span>: !!binding.modifiers.fullscreen</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                el.instance = loading; <span class="comment">// el.instance是个Vue实例</span></span><br><span class="line">                el.loading = loading.$el; <span class="comment">// el.loading的DOM元素是loading.$el</span></span><br><span class="line">                el.loadingStyle = &#123;&#125;;</span><br><span class="line">                toggleLoading(el, binding);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">update</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">                el.instance.setText(el.getAttribute(<span class="string">&#x27;loading-text&#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> (binding.oldValue !== binding.value) &#123;</span><br><span class="line">                    toggleLoading(el, binding)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">unbind</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123; <span class="comment">// 解绑</span></span><br><span class="line">                <span class="keyword">if</span> (el.domInserted) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binding.modifiers.fullscreen) &#123;</span><br><span class="line">                        <span class="built_in">document</span>.body.removeChild(el.loading);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        el.loading &amp;&amp;</span><br><span class="line">                            el.loading.parentNode &amp;&amp;</span><br><span class="line">                            el.loading.parentNode.removeChild(el.loading);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> toggleLoading = <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123; <span class="comment">// 用于控制Loading的出现与消失</span></span><br><span class="line">            <span class="keyword">if</span> (binding.value) &#123;</span><br><span class="line">                Vue.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binding.modifiers.fullscreen) &#123; <span class="comment">// 如果是全屏</span></span><br><span class="line">                        el.originalPosition = <span class="built_in">document</span>.body.style.position;</span><br><span class="line">                        el.originalOverflow = <span class="built_in">document</span>.body.style.overflow;</span><br><span class="line">                        insertDom(<span class="built_in">document</span>.body, el, binding); <span class="comment">// 插入dom</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        el.originalPosition = el.style.position;</span><br><span class="line">                        insertDom(el, el, binding); <span class="comment">// 如果非全屏，插入元素自身</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (el.domVisible) &#123;</span><br><span class="line">                    el.instance.$on(<span class="string">&#x27;after-leave&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        el.domVisible = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (binding.modifiers.fullscreen &amp;&amp; el.originalOverflow !== <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">                            <span class="built_in">document</span>.body.style.overflow = el.originalOverflow;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (binding.modifiers.fullscreen) &#123;</span><br><span class="line">                            <span class="built_in">document</span>.body.style.position = el.originalPosition;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            el.style.position = el.originalPosition;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    el.instance.visible = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> insertDom = <span class="function">(<span class="params">parent, el, binding</span>) =&gt;</span> &#123; <span class="comment">// 插入dom的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (!el.domVisible) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.keys(el.loadingStyle).forEach(<span class="function"><span class="params">property</span> =&gt;</span> &#123;</span><br><span class="line">                    el.loading.style[property] = el.loadingStyle[property];</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (el.originalPosition !== <span class="string">&#x27;absolute&#x27;</span>) &#123;</span><br><span class="line">                    parent.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binding.modifiers.fullscreen) &#123;</span><br><span class="line">                    parent.style.overflow = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                el.domVisible = <span class="literal">true</span>;</span><br><span class="line">                parent.appendChild(el.loading) <span class="comment">// 插入的是el.loading而不是el本身</span></span><br><span class="line">                Vue.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    el.instance.visible = <span class="literal">true</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                el.domInserted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-loading.fullscreen</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">loading-text</span>=<span class="string">&quot;正在加载中&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字超出固定行数隐藏</title>
      <link href="/2020/06/04/js%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E5%9B%BA%E5%AE%9A%E8%A1%8C%E6%95%B0%E9%9A%90%E8%97%8F/"/>
      <url>/2020/06/04/js%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E5%9B%BA%E5%AE%9A%E8%A1%8C%E6%95%B0%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><div class="img_box"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/example1.png"                                     ></div><span id="more"></span><h3 id="实现超出单行隐藏"><a href="#实现超出单行隐藏" class="headerlink" title="实现超出单行隐藏"></a>实现超出单行隐藏</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现超出三行隐藏"><a href="#实现超出三行隐藏" class="headerlink" title="实现超出三行隐藏"></a>实现超出三行隐藏</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否有隐藏内容"><a href="#判断是否有隐藏内容" class="headerlink" title="判断是否有隐藏内容"></a>判断是否有隐藏内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelect(<span class="string">&#x27;.text&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> dom.scrollHeight &gt; dom.clientHeight;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/28/hello-world/"/>
      <url>/2018/10/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
