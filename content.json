{"meta":{"title":"MyBlog","subtitle":"","description":"前端开发 javascript css html 样式","author":"danel","url":"https://chenshanshu.github.io/2020/06/15/hello-world","root":"/"},"pages":[],"posts":[{"title":"flask学习笔记","slug":"flask学习笔记","date":"2021-10-19T07:41:16.000Z","updated":"2021-10-19T11:06:14.742Z","comments":true,"path":"2021/10/19/flask学习笔记/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/10/19/flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"flask学习笔记安装Flask 1pip install Flask","text":"flask学习笔记安装Flask 1pip install Flask flask的基本使用方法","categories":[{"name":"+ python","slug":"python","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/python/"}],"tags":[{"name":"python、flask","slug":"python、flask","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/python%E3%80%81flask/"}]},{"title":"css3动画","slug":"css3动画","date":"2021-07-28T08:16:10.000Z","updated":"2021-09-08T09:34:06.641Z","comments":true,"path":"2021/07/28/css3动画/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/07/28/css3%E5%8A%A8%E7%94%BB/","excerpt":"","text":"css3 123456position: sticky;top: 0;-webkit-transform: translateZ(-1px) scale(2);transform: translateZ(-1px) scale(2);-webkit-transform-origin: 0 0;transform-origin: 0 0;","categories":[],"tags":[]},{"title":"一种避免重复请求的方法","slug":"一种避免重复请求的方法","date":"2021-06-21T11:44:50.000Z","updated":"2021-07-05T03:20:44.416Z","comments":true,"path":"2021/06/21/一种避免重复请求的方法/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/06/21/%E4%B8%80%E7%A7%8D%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"一种避免重复请求的方法 需求1、需求：小程序在app.js中需要发起一个login请求，在index的onLoad()钩子里要拿到login的返回值进行后续操作。2、通过该方法可以避免在第一次请求未完成时发出第二个请求。 实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 一种避免重复请求的方法 * @arg * arg[0] id String * arg[1] promise函数 Function * arg[2] arg[1]的参数 Object **/let emiter = &#123; _PENDING: 'pending', _RESOLVED: 'resolved', _REJECTED: 'rejected'&#125;;export class Emiter &#123; constructor(...arg) &#123; const unionKey = 'emiter-' + arg[0] emiter[unionKey] = emiter[unionKey] || &#123; resolveQueue: [], rejectQueue: [] &#125; this.emiter = emiter[unionKey] this.methods = arg[1] || '' if (!this.emiter.promiseStatus &amp;&amp; typeof this.methods === 'function') &#123; this.emiter.promiseStatus = emiter['_PENDING'] this.methods(arg[2] || &#123;&#125;).then(res =&gt; &#123; this.emiter.promiseStatus = emiter['_RESOLVED'] this.emitAll(this.emiter.resolveQueue, res) &#125;).catch(err =&gt; &#123; this.emiter.promiseStatus = emiter['_REJECTED'] this.emitAll(this.emiter.rejectQueue, err) &#125;) &#125; &#125; emitAll(queue, res) &#123; if (this.emiter.promiseStatus === emiter['_PENDING']) return while (queue.length) &#123; queue[0].call(this, res) queue.shift() &#125; delete this.emiter.promiseStatus &#125; then(callback) &#123; if (callback &amp;&amp; typeof callback === 'function') &#123; this.emiter.resolveQueue.push(callback) &#125; return this &#125; catch (callback) &#123; if (callback &amp;&amp; typeof callback === 'function') &#123; this.emiter.rejectQueue.push(callback) &#125; &#125;&#125; 示例123456const fun = function (params) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(_ =&gt; &#123; resolve('REQUEST SUCCESS') &#125;, 1000) &#125;)&#125;new Emiter('union-id', fun).then(res=&gt;&#123;&#125;).catch(err=&gt;&#123;&#125;)","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"}]},{"title":"浏览器下载文件","slug":"浏览器下载文件","date":"2021-04-23T07:17:35.000Z","updated":"2021-06-09T11:14:57.841Z","comments":true,"path":"2021/04/23/浏览器下载文件/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/04/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/","excerpt":"","text":"文件下载","categories":[],"tags":[{"name":"download","slug":"download","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/download/"}]},{"title":"浏览器打印功能","slug":"浏览器打印功能","date":"2021-04-07T02:22:41.000Z","updated":"2021-04-23T06:55:55.531Z","comments":true,"path":"2021/04/07/浏览器打印功能/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/04/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/","excerpt":"","text":"打印API：window.print() 需求：打印局部内容，如打印下面页面类名 printBox 里面的内容12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;div&gt;页面内容...&lt;/div&gt; &lt;button class=\"printBtn\"&gt;打印报告&lt;/button&gt; &lt;div id=\"printContent\" style=\"display:none\"&gt; &lt;div class=\"printBox\"&gt; &lt;h1&gt;打印报告&lt;h1&gt; &lt;p&gt;报告内容...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 实现：已知A4纸张尺寸为297mm*210mm，通过创建 iframe 来实现打印；1234567891011121314151617181920212223242526272829var a = 1;var frameId = 'printFrame';/** * @param &#123;boolean&#125; portrait 是否纵向打印*/var print = function(portrait)&#123; var iframe = document.getElementById(frameId); if(!iframe)&#123; var frameStyle = portrait ? `&lt;style&gt;@page&#123;size:A4 portrait;margin:0mm;width:297mm;min-height:200mm;&#125;&lt;/style&gt;`: `&lt;style&gt;@page&#123;size:A4 landscape;margin:0mm;width:210mm;min-height:280mm;&#125;&lt;/style&gt;`; // 当高度设置为最大值，会出现打印内容后面多出一张空白页 var el = document.getElementById(\"printContent\"); iframe = document.createElement('IFRAME'); iframe.setAttribute(frameId); iframe.setAttribute('style', 'position:absolute;width:0px;height:0px;left:-500px;top:-500px;'); document.body.appendChild(iframe); var doc = iframe.contentWindow.document; doc.write(frameStyle); doc.write(`&lt;div&gt;$&#123;el.innerHTML&#125;&lt;/div&gt;`); doc.close(); iframe.contentWindow.focus(); &#125; iframe.contentWindow.print(); if (navigator.userAgent.indexOf(\"MSIE\") &gt; 0)&#123; document.body.removeChild(iframe); &#125;&#125; 注意： 当打印内容带有背景时候记得勾选背景图形选项 此处只测试了Chrome，兼容性未处理 扩展：打印机型号不同时打印内容也有差别，所以可以通过用canvas来绘制内容(可以参考微信小程序生成分享图功能)，然后生成图片放入第二步的iframe中。","categories":[],"tags":[{"name":"web print iframe","slug":"web-print-iframe","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/web-print-iframe/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-03-04T06:49:48.058Z","updated":"2021-03-04T06:49:48.058Z","comments":true,"path":"2021/03/04/hello-world/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2021/03/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Web Components","slug":"web-components","date":"2020-11-06T02:10:29.000Z","updated":"2021-03-04T06:49:48.061Z","comments":true,"path":"2020/11/06/web-components/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/11/06/web-components/","excerpt":"","text":"The Shadow DOM通过shadow DOM在文档流中创建一些完全独立于其他元素的子DOM树（sub-DOM trees），由于这个特性，使我们能封装一个具有独立功能的组件，并且可以保证不会干扰到其它DOM元素 兼容性Chrome、Opera、Chrome for Android WebComponents的重要性 开发无害插件（主页面样式不会修改组件样式） 能开发更通用的组件 可维护","categories":[{"name":"+ web","slug":"web","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/web/"}]},{"title":"Apache配置","slug":"Apache配置","date":"2020-10-28T07:40:04.000Z","updated":"2021-03-04T06:49:48.057Z","comments":true,"path":"2020/10/28/Apache配置/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/28/Apache%E9%85%8D%E7%BD%AE/","excerpt":"","text":"wamp安装及配置反向代理 安装wamp，也可安装apache 下载地址 “http://www.wampserver.com/en/&quot; 配置apache使外网访问（版本2.4.27） 修改httpd.conf文件Require all denied ==&gt; Require all granted Require local ==&gt; Require all granted Listen 0.0.0.0:8000 //搜索 Listen 0.0.0.0:80 添加对8000端口的监听 修改httpd-vhosts.conf文件Require all denied ==&gt; Require all granted //至此别人可以访问你的www目录下的静态内容 设置花生壳内网穿透（有公网ip的忽略） 填写你的局域网ip,端口,获得外网访问地址 配置Apache反向代理nodejs服务 修改httpd.conf文件 //去掉下列内容的注释，引入代理模块 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so //如需ftp，取消如下注释 LoadModule proxy_ftp_module modules/mod_proxy_ftp.so 修改httpd-vhosts.conf文件 //添加下列代码 &lt;VirtualHost *:8000&gt; //不放在80端口上防止影响phpMyAdmin ServerName 20xr498049.imwork.net //外网访问的域名 ServerAlias www.20xr498049.imwork.net:42685 //别名 #DocumentRoot &quot;${INSTALL_DIR}/www&quot; &lt;Proxy *&gt; Order allow,deny Allow from all &lt;/Proxy&gt; &lt;Location /&gt; ProxyPass http://localhost:3000/ //node访问地址 ProxyPassReverse http://localhost:3000/ &lt;/Location&gt; &lt;/VirtualHost&gt; 开启nodejs项目，重启apache服务。","categories":[],"tags":[{"name":"Apache","slug":"Apache","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/Apache/"}]},{"title":"git 手册","slug":"git-手册","date":"2020-10-28T07:34:41.000Z","updated":"2021-07-05T03:20:44.400Z","comments":true,"path":"2020/10/28/git-手册/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/28/git-%E6%89%8B%E5%86%8C/","excerpt":"","text":"git操作 分支操作 操作 命令 新建本地新分支 git branch branch 新建并切换到本地新分支 git checkout -b branch 新建远程分支 git push origin branch:remoteBranch 删除本地分支 git branch -d dev 删除远程分支 git push origin :remoteBranch 设置本地追踪远程分支 git branch --set-upstream-to=origin/remoteBranch localBranch 直接将远程分支拉取并在本地建立关联分支 git checkout -b localBranch origin/remoteBranch orgit fetch origin master:test 强制操作 操作 命令 强制覆盖本地修改 git fetch --allgit reset --hard origin/mastergit pull 强制上传 git push -f origin remoteBranch 版本管理 操作 命令 查看本地分支与远程关联情况 git branch -vv 查看本地仓库状态 git status 查看本地操作 git reflog 比较本地与远程 git log -p master ..origin/master 查看某个提交 git show commitID 修改主机地址 git remote set-url origin ssh.aaaa.gitorgit remote rm origingit remote add origin [url] 版本回退 git reset --hard commitID 版本回滚 git revert HEAD 将指定的提交（commit）应用于其他分支 git cherry-pick commitID//分支名 Cherry pick 支持一次转移多个提交 git cherry-pick A^..B//包含A和B","categories":[],"tags":[]},{"title":"linux shell笔记","slug":"linux-shell笔记","date":"2020-10-28T07:28:10.000Z","updated":"2021-03-04T06:49:48.059Z","comments":true,"path":"2020/10/28/linux-shell笔记/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/28/linux-shell%E7%AC%94%E8%AE%B0/","excerpt":"","text":"raspberry 安装nginx sudo apt-get install nginx sudo /etc/init.d/nginx start 启动 curl -I localhost:80 测试能否访问 sudo nano /etc/nginx/sites-available/default 修改端口 sudo /etc/init.d/nginx reload 重启 用户操作 useradd danel 添加用户 userdel danel 删除用户 usermod -a -G user danel 添加用户组 usermod -g user danel 修改用户主组 newgrp root 切换用户主从组 groupadd groupname 添加组 groupmod -n new_name： 修改组名 groupdel groupname 删除组 groupmems -g groupname [action] /* -a, –add username: 指定用户加入组；-d, –delete username: 从组中删除用户；-p, –purge : 从组中清除所有成员；-l, –list: 显示组成员列表; */ gpasswd -a danel user 给组添加用户 gpasswd -d danel user 删除组中用户 主要配置文件 /etc/passwd: 用户及其属性信息(名称，UID, 主组ID) /etc/shadow: 用户密码及相关属性。 /etc/group: 组及其属性信息。 /etc/gshadow: 组密码及相关属性。 /etc/wpa_supplicant/wpa_supplicant.conf: WiFi管理 redesktop使用文档 apt-get install redesktop ctrl+alt+t //打开终端 rdesktop -f -a 32 -u username -p password ip:port //-f 全屏 ctrl+alt+enter //切换全屏 ctrl+alt+F2 //进入字符终端杀死进程 sudo pkill rdesktop","categories":[{"name":"+ linux","slug":"linux","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/linux/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/shell/"}]},{"title":"webpack快速上手","slug":"webpack快速上手","date":"2020-10-28T07:25:23.000Z","updated":"2021-03-04T06:49:48.062Z","comments":true,"path":"2020/10/28/webpack快速上手/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/28/webpack%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","excerpt":"","text":"webpack4基本使用概念 webpack是一个前端资源加载/打包工具。 它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 安装需要先安装好nodejs, 然后执行下列操作；可能遇到的问题，linux下通过sudo获得管理员权限安装，windows下开始搜索cmd, 右键以管理员身份运行才能安装以下内容；但是在vscode、webstorm等控制台可以直接安装。 mkdir webpacktest cd webpacktest npm init -f-y npm i webpack -D /*i == install ; -D == --dev--save ; */ npm i webpack-cli -D /*webpack4提示需要安装这个才能使用*/ 使用安装后webpack模块就被安装到项目里的node_modules文件夹下面；新建文件demo1.js，写入你想执行的js代码。 网上大部分教程都是在linux下的执行命令，这里讲一下windows下的使用方法。 .\\node_modules\\.bin\\webpack demo1.js -o bundle.js --mode development 至此完成了第一次的代码打包。 使用配置文件在项目根目录下新建webpack.config.js；新建src文件夹，以后自己编写的代码全部放在这个文件夹下面；新建dist文件夹用来存放打包后的文件。 const path = require('path'); const config = { mode:'development', entry:{ main:path.resolve(__dirname,\"./src\",\"index.js\") }, output:{ path:path.resolve(__dirname,'dist'), filename:'bundle.js' }, module:{ rules:[ { test:/\\.css$/, use:[ \"style-loader\", \"css-loader\" ] } ] } }; module.exports = config; 有了配置文件后可以用以下命令就能执行打包了 .\\node_modules\\.bin\\webpack 使用起来还是不方便，可以把命令加到package.json里；注意这里只需要提供包名，node会自动找到包所在目录。 \"scripts\": { \"start\": \"webpack\", } 现在可以在命令行使用下面命令打包 npm start /*注意，当命令指定的为start时候可以省去run*/ markdown预览 ctrl+shift+v","categories":[{"name":"+ js打包","slug":"js打包","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/js%E6%89%93%E5%8C%85/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/webpack/"}]},{"title":"正则表达式","slug":"正则表达式","date":"2020-10-28T02:58:34.000Z","updated":"2021-03-04T06:49:48.063Z","comments":true,"path":"2020/10/28/正则表达式/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"^((?!\\d*$)\\S{2, })|(\\d{6, })$//超过2个字符或者超过6位纯数字","categories":[{"name":"+ regex","slug":"regex","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/regex/"}],"tags":[{"name":"regex","slug":"regex","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/regex/"}]},{"title":"python 截取字符串","slug":"python截取字符串","date":"2020-10-09T10:20:01.000Z","updated":"2021-03-04T06:49:48.060Z","comments":true,"path":"2020/10/09/python截取字符串/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/10/09/python%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"111","categories":[{"name":"+ linux","slug":"linux","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/linux/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/shell/"}]},{"title":"linux安装ngix及rdesktop的使用","slug":"linux安装ngix及rdesktop的使用","date":"2020-06-04T09:37:50.000Z","updated":"2021-03-04T06:49:48.060Z","comments":true,"path":"2020/06/04/linux安装ngix及rdesktop的使用/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/06/04/linux%E5%AE%89%E8%A3%85ngix%E5%8F%8Ardesktop%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"raspberry 安装nginx sudo apt-get install nginx sudo /etc/init.d/nginx start 启动 curl -I localhost:80 测试能否访问 sudo nano /etc/nginx/sites-available/default 修改端口 sudo /etc/init.d/nginx reload 重启 用户操作 useradd danel 添加用户 userdel danel 删除用户 usermod -a -G user danel 添加用户组 usermod -g user danel 修改用户主组 newgrp root 切换用户主从组 groupadd groupname 添加组 groupmod -n new_name： 修改组名 groupdel groupname 删除组 groupmems -g groupname [action] /* -a, –add username: 指定用户加入组；-d, –delete username: 从组中删除用户；-p, –purge : 从组中清除所有成员；-l, –list: 显示组成员列表; */ gpasswd -a danel user 给组添加用户 gpasswd -d danel user 删除组中用户 主要配置文件 /etc/passwd: 用户及其属性信息(名称，UID, 主组ID) /etc/shadow: 用户密码及相关属性。 /etc/group: 组及其属性信息。 /etc/gshadow: 组密码及相关属性。 /etc/wpa_supplicant/wpa_supplicant.conf: WiFi管理 redesktop使用文档 apt-get install redesktop ctrl+alt+t //打开终端 rdesktop -f -a 32 -u username -p password ip:port //-f 全屏 ctrl+alt+enter //切换全屏 ctrl+alt+F2 //进入字符终端杀死进程 sudo pkill rdesktop","categories":[{"name":"+ linux","slug":"linux","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/linux/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/shell/"}]},{"title":"vue组件的三种调用方式","slug":"vue组件的三种调用方式","date":"2020-06-04T07:37:56.000Z","updated":"2021-03-04T06:49:48.061Z","comments":true,"path":"2020/06/04/vue组件的三种调用方式/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/06/04/vue%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/","excerpt":"","text":"一、注册组件，直接调用这种比较常见 1234567891011121314&lt;template&gt; &lt;div class=\"page\"&gt; &lt;my-dialog /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import MyDialog from '@/components' export default &#123; components: &#123; 'my-dialog': MyDialog &#125; &#125;&lt;/script&gt; 二、通过js调用使用场景：登陆弹窗，付费弹窗 123456789101112131415161718192021222324252627282930313233343536373839import VipPop from './VipPop'class VipPopup &#123; constructor(Vue, options) &#123; this.vipPop = Vue.extend(VipPop); this.popupInstance = new this.vipPop(&#123; data() &#123; return &#123; title: '成为VIP，开启新特权' &#125; &#125;, propsData: &#123;&#125;, extends: options &#125;).$mount(); &#125; show(obj) &#123; obj.title &amp;&amp; (this.popupInstance.title = obj.title); if (this.el) &#123; this.el.style.display = 'block'; &#125; else &#123; this.el = this.popupInstance.$el; document.body.appendChild(this.el) &#125; document.body.classList.add('van-overflow-hidden') &#125; hide() &#123; document.body.classList.remove('van-overflow-hidden') this.el &amp;&amp; (this.el.style.display = 'none'); &#125; remove() &#123; document.body.classList.remove('van-overflow-hidden') this.el &amp;&amp; this.el.remove(); this.el = null; &#125; export default &#123; install: function(Vue, options) &#123; Vue.prototype.$vipPop = new VipPopup(Vue, options); &#125; &#125;;&#125; 1234.van-overflow-hidden &#123; overflow: hidden !important; /**禁止背景滚动条**/&#125; 在main.js中引入这个组件 12345678import Vue from 'vue'import router from \"./router.js\"import store from './store'import VipPop from '@/components/VipPop'Vue.use(VipPop, &#123; router, store&#125;) 三、以指令的形式调用使用场景：加载动画 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889import Vue from 'vue'const LoadingConstructor = Vue.extend(require('./Loading.vue'))export default &#123; install: Vue =&gt; &#123; Vue.directive('loading', &#123; // 指令的关键 bind: (el, binding) =&gt; &#123; const loading = new LoadingConstructor(&#123; // 实例化一个loading el: document.createElement('div'), data: &#123; text: el.getAttribute('loading-text'), // 通过loading-text属性获取loading的文字 fullscreen: !!binding.modifiers.fullscreen &#125; &#125;) el.instance = loading; // el.instance是个Vue实例 el.loading = loading.$el; // el.loading的DOM元素是loading.$el el.loadingStyle = &#123;&#125;; toggleLoading(el, binding); &#125;, update: (el, binding) =&gt; &#123; el.instance.setText(el.getAttribute('loading-text')) if (binding.oldValue !== binding.value) &#123; toggleLoading(el, binding) &#125; &#125;, unbind: (el, binding) =&gt; &#123; // 解绑 if (el.domInserted) &#123; if (binding.modifiers.fullscreen) &#123; document.body.removeChild(el.loading); &#125; else &#123; el.loading &amp;&amp; el.loading.parentNode &amp;&amp; el.loading.parentNode.removeChild(el.loading); &#125; &#125; &#125; &#125;) const toggleLoading = (el, binding) =&gt; &#123; // 用于控制Loading的出现与消失 if (binding.value) &#123; Vue.nextTick(() =&gt; &#123; if (binding.modifiers.fullscreen) &#123; // 如果是全屏 el.originalPosition = document.body.style.position; el.originalOverflow = document.body.style.overflow; insertDom(document.body, el, binding); // 插入dom &#125; else &#123; el.originalPosition = el.style.position; insertDom(el, el, binding); // 如果非全屏，插入元素自身 &#125; &#125;) &#125; else &#123; if (el.domVisible) &#123; el.instance.$on('after-leave', () =&gt; &#123; el.domVisible = false; if (binding.modifiers.fullscreen &amp;&amp; el.originalOverflow !== 'hidden') &#123; document.body.style.overflow = el.originalOverflow; &#125; if (binding.modifiers.fullscreen) &#123; document.body.style.position = el.originalPosition; &#125; else &#123; el.style.position = el.originalPosition; &#125; &#125;); el.instance.visible = false; &#125; &#125; &#125; const insertDom = (parent, el, binding) =&gt; &#123; // 插入dom的逻辑 if (!el.domVisible) &#123; Object.keys(el.loadingStyle).forEach(property =&gt; &#123; el.loading.style[property] = el.loadingStyle[property]; &#125;); if (el.originalPosition !== 'absolute') &#123; parent.style.position = 'relative' &#125; if (binding.modifiers.fullscreen) &#123; parent.style.overflow = 'hidden' &#125; el.domVisible = true; parent.appendChild(el.loading) // 插入的是el.loading而不是el本身 Vue.nextTick(() =&gt; &#123; el.instance.visible = true; &#125;); el.domInserted = true; &#125; &#125; &#125;&#125; 1&lt;div v-loading.fullscreen=\"loading\" loading-text=\"正在加载中\"&gt;","categories":[{"name":"+ vue","slug":"vue","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/vue/"}]},{"title":"文字超出固定行数隐藏","slug":"js实现文字超出固定行数隐藏","date":"2020-06-04T03:19:05.000Z","updated":"2021-03-04T06:49:48.058Z","comments":true,"path":"2020/06/04/js实现文字超出固定行数隐藏/","link":"","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/2020/06/04/js%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E5%9B%BA%E5%AE%9A%E8%A1%8C%E6%95%B0%E9%9A%90%E8%97%8F/","excerpt":"","text":"实现效果 实现超出单行隐藏123456.text &#123; width: 300px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;&#125; 实现超出三行隐藏12345678.text &#123; width: 300px; overflow: hidden; display: -webkit-box; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 3;&#125; 判断是否有隐藏内容12let dom = document.querySelect('.text');return dom.scrollHeight &gt; dom.clientHeight;","categories":[{"name":"+ js","slug":"js","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"}]}],"categories":[{"name":"+ python","slug":"python","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/python/"},{"name":"+ web","slug":"web","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/web/"},{"name":"+ linux","slug":"linux","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/linux/"},{"name":"+ js打包","slug":"js打包","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/js%E6%89%93%E5%8C%85/"},{"name":"+ regex","slug":"regex","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/regex/"},{"name":"+ vue","slug":"vue","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/vue/"},{"name":"+ js","slug":"js","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/categories/js/"}],"tags":[{"name":"python、flask","slug":"python、flask","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/python%E3%80%81flask/"},{"name":"js","slug":"js","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"},{"name":"download","slug":"download","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/download/"},{"name":"web print iframe","slug":"web-print-iframe","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/web-print-iframe/"},{"name":"web","slug":"web","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/web/"},{"name":"Apache","slug":"Apache","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/Apache/"},{"name":"shell","slug":"shell","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/shell/"},{"name":"webpack","slug":"webpack","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/webpack/"},{"name":"regex","slug":"regex","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/regex/"},{"name":"vue","slug":"vue","permalink":"https://chenshanshu.github.io/2020/06/15/hello-world/tags/vue/"}]}